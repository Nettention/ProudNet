/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#		if defined(__ORBIS__)
#     		define SWIGEXPORT extern "C" __declspec (dllexport)
#		else
#     		define SWIGEXPORT __attribute__ ((visibility("default")))
#   	endif
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types:
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ProudNetClientPlugin(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback,
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback,
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback,
                                                SWIG_CSharpExceptionCallback_t overflowCallback,
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ProudNetClientPlugin(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ProudNetClientPlugin(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "NativeType.h"
#include "EventWrap.h"
#include "ProudNetClientPlugin.h"


#if defined(_WIN32)
#include <windows.h>
#include <rpc.h>
#endif


#include <string>


#include <stdint.h>		// Use the C99 official header


#include <stdint.h>		// Use the C99 official header


#include "PNString.h"

Proud::CStringEncoder* GetUTF16toUTF8()
{
	// ikpil.choi 2017.01.10 : Unity 4.x 쪽이 아직 C++98을 사용하므로, C++11 코드 제거
	//static Proud::CHeldPtr<Proud::CStringEncoder> encoder(Proud::CStringEncoder::Create("UTF-16LE", "UTF-8"));
	//return encoder;

	// junghoon.lee 2018.08.23 상기의 주석처리되어 있는 인코더를 사용하면 한글 문자열이 깨지는 문제가 발생하여 아래와 같이 디폴트 인코더로 CP949를 사용하게 바꾸었습니다.
	// 3개국어 (영어반드시 포함) 이상 한 문자열에 쓰이게 되면 깨지는 문제가 아직 있습니다.
	// 현재 임시 미봉책입니다.
	return NULL;
}

Proud::CStringEncoder* GetUTF8toUTF16()
{
	// ikpil.choi 2017.01.10 : Unity 4.x 쪽이 아직 C++98을 사용하므로, C++11 코드 제거
	//static Proud::CHeldPtr<Proud::CStringEncoder> encoder(Proud::CStringEncoder::Create("UTF-8", "UTF-16LE"));
	//return encoder;

	// junghoon.lee 2018.08.23 상기의 주석처리되어 있는 인코더를 사용하면 한글 문자열이 깨지는 문제가 발생하여 아래와 같이 디폴트 인코더로 CP949를 사용하게 바꾸었습니다.
	// 3개국어 (영어반드시 포함) 이상 한 문자열에 쓰이게 되면 깨지는 문제가 아직 있습니다.
	// 현재 임시 미봉책입니다.
	return NULL;
}


SWIGINTERN void Proud_CFastArray_Sl_int_Sg__Add(Proud::CFastArray< int > *self,int value){
		assert(self);
		self->Add(value);
	}
SWIGINTERN int Proud_CFastArray_Sl_int_Sg__Get(Proud::CFastArray< int > *self,int index){
		assert(self);
		return (*self)[index];
	}
SWIGINTERN void Proud_CFastArray_Sl_Proud_AddrPort_Sc_true_Sc_false_Sc_intptr_t_Sg__Add(Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *self,Proud::AddrPort value){
		assert(self);
		self->Add(value);
	}
SWIGINTERN Proud::AddrPort Proud_CFastArray_Sl_Proud_AddrPort_Sc_true_Sc_false_Sc_intptr_t_Sg__Get(Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *self,int index){
		assert(self);
		return (*self)[index];
	}
SWIGINTERN void *Proud_CNetConnectionParam_GetNativeUserData(Proud::CNetConnectionParam *self){
		assert(self);
		return &(self->m_userData);
	}
SWIGINTERN void Proud_CNetConnectionParam_SetExternalUserWorkerThreadPool(Proud::CNetConnectionParam *self,Proud::CThreadPool *threadPool){
		assert(self);
		self->m_externalUserWorkerThreadPool = threadPool;
	}
SWIGINTERN void Proud_CNetConnectionParam_SetExternalNetWorkerThreadPool(Proud::CNetConnectionParam *self,Proud::CThreadPool *threadPool){
		assert(self);
		self->m_externalNetWorkerThreadPool = threadPool;
	}
SWIGINTERN void Proud_ErrorInfo_CopyFromNative(Proud::ErrorInfo *self,void *obj){
		assert(self);
		assert(obj);

		Proud::ErrorInfo* errorInfo = static_cast<Proud::ErrorInfo*>(obj);
		*self = *errorInfo;
	}
SWIGINTERN void *Proud_ErrorInfo_GetNativeReceivedMessage(Proud::ErrorInfo *self){
		assert(self);
		return &(self->m_lastReceivedMessage);
	}
SWIGINTERN int Proud_ErrorInfo_GetNativeReceivedMessageLength(Proud::ErrorInfo *self){
		assert(self);
		return self->m_lastReceivedMessage.GetCount();
	}
SWIGINTERN void Proud_CNetClient_HolsterMoreCallbackUntilNextFrameMove(Proud::CNetClient *self){
		assert(self);
		self->HolsterMoreCallbackUntilNextFrameMove();
	}
SWIGINTERN void Proud_CNetClient_DisconnectAsync(Proud::CNetClient *self){
		assert(self);
		Proud::CDisconnectArgs args;
		self->DisconnectAsync(args);
	}
SWIGINTERN bool Proud_CNetClient_Connect__SWIG_0(Proud::CNetClient *self,Proud::CNetConnectionParam *param){
		assert(self);
		assert(param);
		return self->Connect(*param);
	}
SWIGINTERN bool Proud_CNetClient_Connect__SWIG_1(Proud::CNetClient *self,Proud::CNetConnectionParam *param,Proud::ErrorInfo *outError){
		assert(self);
		assert(param);
		assert(outError);

		Proud::ErrorInfoPtr errorInfo;

		if (false == self->Connect(*param, errorInfo))
		{
			if (outError != NULL)
			{
				*outError = *errorInfo;
			}
			return false;
		}

		return true;
	}
SWIGINTERN void Proud_CNetClient_FrameMove__SWIG_0(Proud::CNetClient *self){
		assert(self);
		self->FrameMove();
	}
SWIGINTERN void Proud_CNetClient_FrameMove__SWIG_1(Proud::CNetClient *self,int maxWaitTime,Proud::CFrameMoveResult *result){
		assert(self);
		self->FrameMove(maxWaitTime, result);
	}
SWIGINTERN Proud::HostIDArray Proud_CNetClient_GetGroupMembers(Proud::CNetClient *self,Proud::HostID groupHostID){
		assert(self);
		Proud::HostIDArray hostIDArray;
		self->GetGroupMembers(groupHostID, hostIDArray);
		return hostIDArray;
	}
SWIGINTERN Proud::HostIDArray Proud_CNetClient_GetLocalJoinedP2PGroups(Proud::CNetClient *self){
		assert(self);
		Proud::HostIDArray hostIDArray;
		self->GetLocalJoinedP2PGroups(hostIDArray);
		return hostIDArray;
	}
SWIGINTERN Proud::CNetClientStats Proud_CNetClient_GetStats(Proud::CNetClient *self){
		assert(self);
		Proud::CNetClientStats status;
		self->GetStats(status);
		return status;
	}
SWIGINTERN Proud::CNetPeerInfo Proud_CNetClient_GetPeerInfo(Proud::CNetClient *self,Proud::HostID peerHostID){
		assert(self);
		Proud::CNetPeerInfo info;
		self->GetPeerInfo(peerHostID, info);
		return info;
	}
SWIGINTERN Proud::CDirectP2PInfo Proud_CNetClient_InvalidateUdpSocket(Proud::CNetClient *self,Proud::HostID peerID){
		assert(self);
		Proud::CDirectP2PInfo directP2PInfo;
		self->InvalidateUdpSocket(peerID, directP2PInfo);
		return directP2PInfo;
	}
SWIGINTERN Proud::ReliableUdpHostStats Proud_CNetClient_GetPeerReliableUdpStats(Proud::CNetClient *self,Proud::HostID peerID){
		assert(self);
		Proud::ReliableUdpHostStats output;
		self->GetPeerReliableUdpStats(peerID, output);
		return output;
	}
SWIGINTERN bool Proud_CNetClient_IsLocalHostBehindNat(Proud::CNetClient *self){
		assert(self);
		bool ret = false;
		self->IsLocalHostBehindNat(ret);
		return ret;
	}
SWIGINTERN Proud::CSocketInfo Proud_CNetClient_GetSocketInfo(Proud::CNetClient *self,Proud::HostID remoteHostID){
		assert(self);
		Proud::CSocketInfo output;
		self->GetSocketInfo(remoteHostID, output);
		return output;
	}
SWIGINTERN int Proud_CNetClient_GetUnreliableMessagingLossRatioPercent(Proud::CNetClient *self,Proud::HostID remotePeerID){
		assert(self);
		int outputPercent = 0;
		self->GetUnreliableMessagingLossRatioPercent(remotePeerID, &outputPercent);
		return outputPercent;
	}
SWIGINTERN Proud::ErrorType Proud_CNetClient_GetUnreliableMessagingLossRatioPercentErrorType(Proud::CNetClient *self,Proud::HostID remotePeerID){
		assert(self);
		int outputPercent = 0;
		return self->GetUnreliableMessagingLossRatioPercent(remotePeerID, &outputPercent);
	}
SWIGINTERN void Proud_CNetClient_SetEventSink(Proud::CNetClient *self,void *obj){
		assert(self);
		assert(obj);
		Proud::INetClientEvent* eventSink = static_cast<Proud::INetClientEvent*>(obj);

		//assert(dynamic_cast<CNetClientEventWrap*>(eventSink));

		self->SetEventSink(eventSink);
	}
SWIGINTERN void Proud_CNetClient_AttachProxy(Proud::CNetClient *self,void *obj){
		assert(self);
		assert(obj);
		Proud::IRmiProxy* proxy = static_cast<Proud::IRmiProxy*>(obj);

		//assert(dynamic_cast<CRmiProxyWrap*>(proxy));

		self->AttachProxy(proxy);
	}
SWIGINTERN void Proud_CNetClient_AttachStub(Proud::CNetClient *self,void *obj){
		assert(self);
		assert(obj);
		Proud::IRmiStub* stub = static_cast<Proud::IRmiStub*>(obj);

		//assert(dynamic_cast<CRmiStubWrap*>(stub));
		self->AttachStub(stub);
	}
SWIGINTERN int Proud_CNetClient_GetLastUnreliablePingMs(Proud::CNetClient *self,Proud::HostID remoteHostID){
		assert(self);
		return self->GetLastUnreliablePingMs(remoteHostID);
	}
SWIGINTERN double Proud_CNetClient_GetLastUnreliablePingSec(Proud::CNetClient *self,Proud::HostID remoteHostID){
		assert(self);
		return self->GetLastUnreliablePingSec(remoteHostID);
	}
SWIGINTERN int Proud_CNetClient_GetLastReliablePingMs(Proud::CNetClient *self,Proud::HostID remoteHostID){
		assert(self);
		return self->GetLastReliablePingMs(remoteHostID);
	}
SWIGINTERN double Proud_CNetClient_GetLastReliablePingSec(Proud::CNetClient *self,Proud::HostID remoteHostID){
		assert(self);
		return self->GetLastReliablePingSec(remoteHostID);
	}
SWIGINTERN int Proud_CNetClient_GetRecentReliablePingMs(Proud::CNetClient *self,Proud::HostID remoteHostID){
		assert(self);
		return self->GetRecentReliablePingMs(remoteHostID);
	}
SWIGINTERN double Proud_CNetClient_GetRecentReliablePingSec(Proud::CNetClient *self,Proud::HostID remoteHostID){
		assert(self);
		return self->GetRecentReliablePingSec(remoteHostID);
	}
SWIGINTERN int Proud_CNetClient_GetRecentUnreliablePingMs(Proud::CNetClient *self,Proud::HostID remoteHostID){
		assert(self);
		return self->GetRecentUnreliablePingMs(remoteHostID);
	}
SWIGINTERN void Proud_CRemoteOfflineEventArgs_CopyFromNative(Proud::CRemoteOfflineEventArgs *self,void *obj){
		assert(self);
		assert(obj);

		Proud::CRemoteOfflineEventArgs* args = static_cast<Proud::CRemoteOfflineEventArgs*>(obj);
		*self = *args;
	}
SWIGINTERN void Proud_CRemoteOnlineEventArgs_CopyFromNative(Proud::CRemoteOnlineEventArgs *self,void *obj){
		assert(self);
		assert(obj);

		Proud::CRemoteOnlineEventArgs* args = static_cast<Proud::CRemoteOnlineEventArgs*>(obj);
		*self = *args;
	}
SWIGINTERN uint32_t Proud_CSocketInfo_GetTCPSocket(Proud::CSocketInfo *self){
		assert(self);
		return (uint32_t)self->m_tcpSocket;
	}
SWIGINTERN uint32_t Proud_CSocketInfo_GetUDPSocket(Proud::CSocketInfo *self){
		assert(self);
		return (uint32_t)self->m_udpSocket;
	}
SWIGINTERN void *Proud_CDisconnectArgs_GetNativeComment(Proud::CDisconnectArgs *self){
		assert(self);
		return &(self->m_comment);
	}
SWIGINTERN void *Proud_AddrPort_GetNativeIPAddr(Proud::AddrPort *self){
	    assert(self);
		return &(self->m_addr.v6Byte);
	}
SWIGINTERN void *Proud_CNetUtil_LocalIPAddresses_New(){
		using namespace Proud;

		CFastArray<String>* output = new CFastArray<String>();
		CNetUtil::GetLocalIPAddresses(*output);
		return (void*) output;
	}
SWIGINTERN void Proud_CNetUtil_LocalIPAddresses_Delete(void *ipAddresses){
		assert(ipAddresses);

		using namespace Proud;
		delete (CFastArray<String>*)ipAddresses;
	}
SWIGINTERN int Proud_CNetUtil_GetLocalIPAddresseCount(void *p){
		if (p == NULL)
		{
			return 0;
		}

		using namespace Proud;

		CFastArray<String>* ipAddresses = (CFastArray<String>*)p;
		return ipAddresses->GetCount();
	}
SWIGINTERN Proud::String Proud_CNetUtil_GetLocalIPAddress(void *p,int index){
		if (p == NULL)
		{
			return Proud::String();
		}

		using namespace Proud;
		CFastArray<String>* ipAddresses = (CFastArray<String>*)p;
		return (*ipAddresses)[index];
	}
SWIGINTERN void Proud_HostIDArray_add(Proud::HostIDArray *self,Proud::HostID data){
		assert(self);
		self->Add(data);
	}
SWIGINTERN void Proud_HostIDArray_Clear(Proud::HostIDArray *self,Proud::HostID data){
		assert(self);
		self->Clear();
	}
SWIGINTERN int Proud_HostIDArray_GetCount(Proud::HostIDArray *self){
		assert(self);
		return self->GetCount();
	}
SWIGINTERN Proud::HostID Proud_HostIDArray_at(Proud::HostIDArray *self,int index){
		assert(self);

		int count = self->GetCount();

		if(index < 0 || count <= index)
		{
			throw Proud::Exception("number is out of range");
		}

		return (*self)[index];
	}
SWIGINTERN int Proud_HostIDSet_GetCount(Proud::HostIDSet *self){
		assert(self);
		return self->GetCount();
	}
SWIGINTERN void Proud_Guid_CopyManagedByteArrayToNativeGuid(Proud::Guid *self,void *inByteArray,int length){
		assert(self);

		if (length <= 0)
		{
			return;
		}

		assert(sizeof(Proud::PNGUID) == length);

		memcpy((void*)self, inByteArray, length);
	}
SWIGINTERN void Proud_ByteArray_Add(Proud::ByteArray *self,uint8_t data){
		assert(self);
		self->Add(data);
	}
SWIGINTERN void Proud_ByteArray_Clear(Proud::ByteArray *self,uint8_t data){
		assert(self);
		self->Clear();
	}
SWIGINTERN int Proud_ByteArray_GetCount(Proud::ByteArray *self){
		assert(self);
		return self->GetCount();
	}
SWIGINTERN uint8_t Proud_ByteArray_At(Proud::ByteArray *self,int index){
		assert(self);

		int count = self->GetCount();

		if(index < 0)
		{
			throw Proud::Exception("index is out of range");
		}

		return (*self)[index];
	}
SWIGINTERN Proud::CThreadPool *Proud_CThreadPool_Create(int threadCount){
		return Proud::CThreadPool::Create(NULL, threadCount);
	}
SWIGINTERN void *Proud_CReceivedMessage_GetMsgBuffer(Proud::CReceivedMessage *self){
		assert(self);
		return (void*)self->m_unsafeMessage.m_msgBuffer.GetData();
	}
SWIGINTERN int Proud_CReceivedMessage_GetMsgBufferLength(Proud::CReceivedMessage *self){
		assert(self);
		return self->m_unsafeMessage.m_msgBuffer.GetCount();
	}
SWIGINTERN int Proud_CReceivedMessage_GetMsgReadOffset(Proud::CReceivedMessage *self){
		assert(self);
		return self->m_unsafeMessage.GetReadOffset();
	}

using namespace Proud;



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ProudNetClientPlugin_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IntArray_TYPE_SIZE_get() {
  unsigned long jresult ;
  size_t result;
  
  result = Proud::CFastArray< int >::TYPE_SIZE;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntArray() {
  void * jresult ;
  Proud::CFastArray< int > *result = 0 ;
  
  {
    try {
      result = (Proud::CFastArray< int > *)new Proud::CFastArray< int >();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntArray(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_SuspendShrink(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      (arg1)->SuspendShrink();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_OnRecycle(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      (arg1)->OnRecycle();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_OnDrop(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      (arg1)->OnDrop();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_AddCount(void * jarg1, int jarg2) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->AddCount(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_resize(void * jarg1, int jarg2) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_GetCount(void * jarg1) {
  int jresult ;
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int result;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      result = (int)((Proud::CFastArray< int > const *)arg1)->GetCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_size(void * jarg1) {
  int jresult ;
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int result;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      result = (int)((Proud::CFastArray< int > const *)arg1)->size();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  bool result;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      result = (bool)((Proud::CFastArray< int > const *)arg1)->IsEmpty();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_Clear(void * jarg1) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  {
    try {
      (arg1)->Clear();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_RemoveAt(void * jarg1, int jarg2) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->RemoveAt(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntArray_Add(void * jarg1, int jarg2) {
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      Proud_CFastArray_Sl_int_Sg__Add(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntArray_Get(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CFastArray< int > *arg1 = (Proud::CFastArray< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Proud::CFastArray< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (int)Proud_CFastArray_Sl_int_Sg__Get(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AddrPortArray_TYPE_SIZE_get() {
  unsigned long jresult ;
  size_t result;
  
  result = Proud::CFastArray< Proud::AddrPort,true,false,intptr_t >::TYPE_SIZE;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AddrPortArray() {
  void * jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *result = 0 ;
  
  {
    try {
      result = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)new Proud::CFastArray< Proud::AddrPort,true,false,intptr_t >();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AddrPortArray(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_SuspendShrink(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      (arg1)->SuspendShrink();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_OnRecycle(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      (arg1)->OnRecycle();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_OnDrop(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      (arg1)->OnDrop();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_AddCount(void * jarg1, int jarg2) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->AddCount(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_resize(void * jarg1, int jarg2) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddrPortArray_GetCount(void * jarg1) {
  int jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int result;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      result = (int)((Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > const *)arg1)->GetCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddrPortArray_size(void * jarg1) {
  int jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int result;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      result = (int)((Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > const *)arg1)->size();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPortArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  bool result;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      result = (bool)((Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > const *)arg1)->IsEmpty();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_Clear(void * jarg1) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  {
    try {
      (arg1)->Clear();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_RemoveAt(void * jarg1, int jarg2) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->RemoveAt(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPortArray_Add(void * jarg1, void * jarg2) {
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  Proud::AddrPort arg2 ;
  Proud::AddrPort *argp2 ;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  argp2 = (Proud::AddrPort *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Proud::AddrPort", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      Proud_CFastArray_Sl_Proud_AddrPort_Sc_true_Sc_false_Sc_intptr_t_Sg__Add(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPortArray_Get(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *) 0 ;
  int arg2 ;
  Proud::AddrPort result;
  
  arg1 = (Proud::CFastArray< Proud::AddrPort,true,false,intptr_t > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = Proud_CFastArray_Sl_Proud_AddrPort_Sc_true_Sc_false_Sc_intptr_t_Sg__Get(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_serverIP_set(void * jarg1, char * jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_serverIP = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetConnectionParam_serverIP_get(void * jarg1) {
  char * jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_serverIP);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_serverPort_set(void * jarg1, unsigned short jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_serverPort = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NetConnectionParam_serverPort_get(void * jarg1) {
  unsigned short jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  uint16_t result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (uint16_t) ((arg1)->m_serverPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_localUdpPortPool_set(void * jarg1, void * jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Proud::CFastArray< int > *arg2 = (Proud::CFastArray< int > *) 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (Proud::CFastArray< int > *)jarg2; 
  if (arg1) (arg1)->m_localUdpPortPool = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetConnectionParam_localUdpPortPool_get(void * jarg1) {
  void * jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Proud::CFastArray< int > *result = 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (Proud::CFastArray< int > *)& ((arg1)->m_localUdpPortPool);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_protocolVersion_set(void * jarg1, void * jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Guid *arg2 = (Guid *) 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (Guid *)jarg2; 
  if (arg1) (arg1)->m_protocolVersion = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetConnectionParam_protocolVersion_get(void * jarg1) {
  void * jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Guid *result = 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (Guid *)& ((arg1)->m_protocolVersion);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_slowReliableP2P_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_slowReliableP2P = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetConnectionParam_slowReliableP2P_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (bool) ((arg1)->m_slowReliableP2P);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_tunedNetworkerSendIntervalMs_TEST_set(void * jarg1, int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_tunedNetworkerSendIntervalMs_TEST = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetConnectionParam_tunedNetworkerSendIntervalMs_TEST_get(void * jarg1) {
  int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  int result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (int) ((arg1)->m_tunedNetworkerSendIntervalMs_TEST);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_simplePacketMode_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_simplePacketMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetConnectionParam_simplePacketMode_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (bool) ((arg1)->m_simplePacketMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_clientAddrAtServer_set(void * jarg1, char * jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_clientAddrAtServer = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetConnectionParam_clientAddrAtServer_get(void * jarg1) {
  char * jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_clientAddrAtServer);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_enableAutoConnectionRecovery_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableAutoConnectionRecovery = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetConnectionParam_enableAutoConnectionRecovery_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (bool) ((arg1)->m_enableAutoConnectionRecovery);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_m_closeNoPingPongTcpConnections_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_closeNoPingPongTcpConnections = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetConnectionParam_m_closeNoPingPongTcpConnections_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (bool) ((arg1)->m_closeNoPingPongTcpConnections);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_userWorkerThreadModel_set(void * jarg1, int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  ThreadModel arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (ThreadModel)jarg2; 
  if (arg1) (arg1)->m_userWorkerThreadModel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetConnectionParam_userWorkerThreadModel_get(void * jarg1) {
  int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  ThreadModel result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (ThreadModel) ((arg1)->m_userWorkerThreadModel);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_netWorkerThreadModel_set(void * jarg1, int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  ThreadModel arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (ThreadModel)jarg2; 
  if (arg1) (arg1)->m_netWorkerThreadModel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetConnectionParam_netWorkerThreadModel_get(void * jarg1) {
  int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  ThreadModel result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (ThreadModel) ((arg1)->m_netWorkerThreadModel);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_timerCallbackIntervalMs_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_timerCallbackIntervalMs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetConnectionParam_timerCallbackIntervalMs_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (uint32_t) ((arg1)->m_timerCallbackIntervalMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_timerCallbackParallelMaxCount_set(void * jarg1, int jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_timerCallbackParallelMaxCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetConnectionParam_timerCallbackParallelMaxCount_get(void * jarg1) {
  int jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  int32_t result;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  result = (int32_t) ((arg1)->m_timerCallbackParallelMaxCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetConnectionParam() {
  void * jresult ;
  Proud::CNetConnectionParam *result = 0 ;
  
  {
    try {
      result = (Proud::CNetConnectionParam *)new Proud::CNetConnectionParam();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetConnectionParam_GetNativeUserData(void * jarg1) {
  void * jresult ;
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  void *result = 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  {
    try {
      result = (void *)Proud_CNetConnectionParam_GetNativeUserData(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_SetExternalUserWorkerThreadPool(void * jarg1, void * jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Proud::CThreadPool *arg2 = (Proud::CThreadPool *) 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (Proud::CThreadPool *)jarg2; 
  {
    try {
      try {
        Proud_CNetConnectionParam_SetExternalUserWorkerThreadPool(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetConnectionParam_SetExternalNetWorkerThreadPool(void * jarg1, void * jarg2) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  Proud::CThreadPool *arg2 = (Proud::CThreadPool *) 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  arg2 = (Proud::CThreadPool *)jarg2; 
  {
    try {
      try {
        Proud_CNetConnectionParam_SetExternalNetWorkerThreadPool(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetConnectionParam(void * jarg1) {
  Proud::CNetConnectionParam *arg1 = (Proud::CNetConnectionParam *) 0 ;
  
  arg1 = (Proud::CNetConnectionParam *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_MessagePriority_Holepunch_get() {
  int jresult ;
  Proud::MessagePriority result;
  
  result = (Proud::MessagePriority)(Proud::MessagePriority)Proud::MessagePriority_Holepunch;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CompareHostID(int jarg1, int jarg2) {
  int jresult ;
  Proud::HostID arg1 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::HostID)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud::CompareHostID(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ToString(int jarg1) {
  char * jresult ;
  Proud::LogCategory arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::LogCategory)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ToString(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_errorType_set(void * jarg1, int jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorType arg2 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  arg2 = (Proud::ErrorType)jarg2; 
  if (arg1) (arg1)->m_errorType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorInfo_errorType_get(void * jarg1) {
  int jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::ErrorType) ((arg1)->m_errorType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_detailType_set(void * jarg1, int jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorType arg2 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  arg2 = (Proud::ErrorType)jarg2; 
  if (arg1) (arg1)->m_detailType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorInfo_detailType_get(void * jarg1) {
  int jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::ErrorType) ((arg1)->m_detailType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_remote_set(void * jarg1, int jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remote = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorInfo_remote_get(void * jarg1) {
  int jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remote);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_comment_set(void * jarg1, char * jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_comment = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_comment_get(void * jarg1) {
  char * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_comment);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_source_set(void * jarg1, char * jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_source = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_source_get(void * jarg1) {
  char * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_source);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorInfo() {
  void * jresult ;
  Proud::ErrorInfo *result = 0 ;
  
  {
    try {
      result = (Proud::ErrorInfo *)new Proud::ErrorInfo();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_GetString(void * jarg1) {
  char * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      result = ((Proud::ErrorInfo const *)arg1)->ToString();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorInfo_Clone(void * jarg1) {
  void * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::ErrorInfo *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      result = (Proud::ErrorInfo *)(arg1)->Clone();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToStringByLangID(int jarg1, int jarg2) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  int arg2 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToStringByLangID(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToPlainString(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToPlainString(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString_Kor(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString_Kor(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString_Eng(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString_Eng(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString_Chn(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString_Chn(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ErrorInfo_TypeToString_Jpn(int jarg1) {
  char * jresult ;
  Proud::ErrorType arg1 ;
  PNTCHAR *result = 0 ;
  
  arg1 = (Proud::ErrorType)jarg1; 
  {
    try {
      result = (PNTCHAR *)Proud::ErrorInfo::TypeToString_Jpn(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorInfo_CopyFromNative(void * jarg1, void * jarg2) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        Proud_ErrorInfo_CopyFromNative(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorInfo_GetNativeReceivedMessage(void * jarg1) {
  void * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      try {
        result = (void *)Proud_ErrorInfo_GetNativeReceivedMessage(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ErrorInfo_GetNativeReceivedMessageLength(void * jarg1) {
  int jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  int result;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      try {
        result = (int)Proud_ErrorInfo_GetNativeReceivedMessageLength(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ErrorInfo(void * jarg1) {
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_FrameMoveResult_processedMessageCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CFrameMoveResult *arg1 = (Proud::CFrameMoveResult *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CFrameMoveResult *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_processedMessageCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FrameMoveResult_processedMessageCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CFrameMoveResult *arg1 = (Proud::CFrameMoveResult *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CFrameMoveResult *)jarg1; 
  result = (uint32_t) ((arg1)->m_processedMessageCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FrameMoveResult_processedEventCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CFrameMoveResult *arg1 = (Proud::CFrameMoveResult *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CFrameMoveResult *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_processedEventCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FrameMoveResult_processedEventCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CFrameMoveResult *arg1 = (Proud::CFrameMoveResult *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CFrameMoveResult *)jarg1; 
  result = (uint32_t) ((arg1)->m_processedEventCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FrameMoveResult() {
  void * jresult ;
  Proud::CFrameMoveResult *result = 0 ;
  
  {
    try {
      result = (Proud::CFrameMoveResult *)new Proud::CFrameMoveResult();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FrameMoveResult(void * jarg1) {
  Proud::CFrameMoveResult *arg1 = (Proud::CFrameMoveResult *) 0 ;
  
  arg1 = (Proud::CFrameMoveResult *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServerConnectionState_realUdpEnabled_set(void * jarg1, unsigned int jarg2) {
  Proud::CServerConnectionState *arg1 = (Proud::CServerConnectionState *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CServerConnectionState *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_realUdpEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ServerConnectionState_realUdpEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CServerConnectionState *arg1 = (Proud::CServerConnectionState *) 0 ;
  bool result;
  
  arg1 = (Proud::CServerConnectionState *)jarg1; 
  result = (bool) ((arg1)->m_realUdpEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServerConnectionState() {
  void * jresult ;
  Proud::CServerConnectionState *result = 0 ;
  
  {
    try {
      result = (Proud::CServerConnectionState *)new Proud::CServerConnectionState();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ServerConnectionState(void * jarg1) {
  Proud::CServerConnectionState *arg1 = (Proud::CServerConnectionState *) 0 ;
  
  arg1 = (Proud::CServerConnectionState *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectP2PInfo_localUdpSocketAddr_set(void * jarg1, void * jarg2) {
  Proud::CDirectP2PInfo *arg1 = (Proud::CDirectP2PInfo *) 0 ;
  AddrPort *arg2 = (AddrPort *) 0 ;
  
  arg1 = (Proud::CDirectP2PInfo *)jarg1; 
  arg2 = (AddrPort *)jarg2; 
  if (arg1) (arg1)->m_localUdpSocketAddr = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirectP2PInfo_localUdpSocketAddr_get(void * jarg1) {
  void * jresult ;
  Proud::CDirectP2PInfo *arg1 = (Proud::CDirectP2PInfo *) 0 ;
  AddrPort *result = 0 ;
  
  arg1 = (Proud::CDirectP2PInfo *)jarg1; 
  result = (AddrPort *)& ((arg1)->m_localUdpSocketAddr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectP2PInfo_localToRemoteAddr_set(void * jarg1, void * jarg2) {
  Proud::CDirectP2PInfo *arg1 = (Proud::CDirectP2PInfo *) 0 ;
  AddrPort *arg2 = (AddrPort *) 0 ;
  
  arg1 = (Proud::CDirectP2PInfo *)jarg1; 
  arg2 = (AddrPort *)jarg2; 
  if (arg1) (arg1)->m_localToRemoteAddr = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirectP2PInfo_localToRemoteAddr_get(void * jarg1) {
  void * jresult ;
  Proud::CDirectP2PInfo *arg1 = (Proud::CDirectP2PInfo *) 0 ;
  AddrPort *result = 0 ;
  
  arg1 = (Proud::CDirectP2PInfo *)jarg1; 
  result = (AddrPort *)& ((arg1)->m_localToRemoteAddr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DirectP2PInfo_remoteToLocalAddr_set(void * jarg1, void * jarg2) {
  Proud::CDirectP2PInfo *arg1 = (Proud::CDirectP2PInfo *) 0 ;
  AddrPort *arg2 = (AddrPort *) 0 ;
  
  arg1 = (Proud::CDirectP2PInfo *)jarg1; 
  arg2 = (AddrPort *)jarg2; 
  if (arg1) (arg1)->m_remoteToLocalAddr = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DirectP2PInfo_remoteToLocalAddr_get(void * jarg1) {
  void * jresult ;
  Proud::CDirectP2PInfo *arg1 = (Proud::CDirectP2PInfo *) 0 ;
  AddrPort *result = 0 ;
  
  arg1 = (Proud::CDirectP2PInfo *)jarg1; 
  result = (AddrPort *)& ((arg1)->m_remoteToLocalAddr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DirectP2PInfo() {
  void * jresult ;
  Proud::CDirectP2PInfo *result = 0 ;
  
  {
    try {
      result = (Proud::CDirectP2PInfo *)new Proud::CDirectP2PInfo();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectP2PInfo_HasBeenHolepunched(void * jarg1) {
  unsigned int jresult ;
  Proud::CDirectP2PInfo *arg1 = (Proud::CDirectP2PInfo *) 0 ;
  bool result;
  
  arg1 = (Proud::CDirectP2PInfo *)jarg1; 
  {
    try {
      result = (bool)(arg1)->HasBeenHolepunched();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirectP2PInfo(void * jarg1) {
  Proud::CDirectP2PInfo *arg1 = (Proud::CDirectP2PInfo *) 0 ;
  
  arg1 = (Proud::CDirectP2PInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeNetClient(void * jarg1) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_Create() {
  void * jresult ;
  Proud::CNetClient *result = 0 ;
  
  {
    try {
      result = (Proud::CNetClient *)Proud::CNetClient::Create();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_Disconnect__SWIG_0(void * jarg1) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      (arg1)->Disconnect();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_Disconnect__SWIG_1(void * jarg1, void * jarg2) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  CDisconnectArgs *arg2 = 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (CDisconnectArgs *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CDisconnectArgs const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->Disconnect((CDisconnectArgs const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NativeNetClient_GetIndirectServerTimeMs(void * jarg1, int jarg2) {
  long long jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  int64_t result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int64_t)(arg1)->GetIndirectServerTimeMs(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetLocalHostID(void * jarg1) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (Proud::HostID)(arg1)->GetLocalHostID();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeNetClient_GetNatDeviceName(void * jarg1) {
  char * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (arg1)->GetNatDeviceName();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NativeNetClient_GetP2PServerTimeMs(void * jarg1, int jarg2) {
  long long jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  int64_t result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int64_t)(arg1)->GetP2PServerTimeMs(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetLocalUdpSocketAddr(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  AddrPort result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (arg1)->GetLocalUdpSocketAddr(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new AddrPort((const AddrPort &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetClient_GetDirectP2PInfo(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::CDirectP2PInfo *arg3 = 0 ;
  bool result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (Proud::CDirectP2PInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::CDirectP2PInfo & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->GetDirectP2PInfo(arg2,*arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetServerAddrPort(void * jarg1) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  AddrPort result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (arg1)->GetServerAddrPort();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new AddrPort((const AddrPort &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetClient_SetHostTag(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (bool)(arg1)->SetHostTag(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NativeNetClient_GetServerTimeMs(void * jarg1) {
  long long jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (int64_t)(arg1)->GetServerTimeMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NativeNetClient_GetServerTimeDiffMs(void * jarg1) {
  long long jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (int64_t)(arg1)->GetServerTimeDiffMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetServerConnectionState(void * jarg1, void * jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::CServerConnectionState *arg2 = 0 ;
  Proud::ConnectionState result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::CServerConnectionState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::CServerConnectionState & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Proud::ConnectionState)(arg1)->GetServerConnectionState(*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetClient_HasServerConnection(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (bool)(arg1)->HasServerConnection();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_StartRoundTripLatencyTest(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  StartRoundTripLatencyTestParameter *arg3 = 0 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (StartRoundTripLatencyTestParameter *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StartRoundTripLatencyTestParameter const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Proud::ErrorType)(arg1)->StartRoundTripLatencyTest(arg2,(StartRoundTripLatencyTestParameter const &)*arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_StopRoundTripLatencyTest(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (Proud::ErrorType)(arg1)->StopRoundTripLatencyTest(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetRoundTripLatency(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  RoundTripLatencyTestResult *arg3 = 0 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (RoundTripLatencyTestResult *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RoundTripLatencyTestResult & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Proud::ErrorType)(arg1)->GetRoundTripLatency(arg2,*arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetClient_RestoreUdpSocket(void * jarg1, int jarg2) {
  unsigned int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  bool result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (bool)(arg1)->RestoreUdpSocket(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_TEST_FallbackUdpToTcp(void * jarg1, int jarg2) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::FallbackMethod arg2 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::FallbackMethod)jarg2; 
  {
    try {
      (arg1)->TEST_FallbackUdpToTcp(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_TEST_EnableVirtualSpeedHack(void * jarg1, long long jarg2) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    try {
      (arg1)->TEST_EnableVirtualSpeedHack(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_TEST_SetPacketTruncatePercent(void * jarg1, int jarg2, int jarg3) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostType arg2 ;
  int arg3 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostType)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->TEST_SetPacketTruncatePercent(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetInternalVersion(void * jarg1) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  int result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (int)(arg1)->GetInternalVersion();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetMessageMaxLength(void * jarg1) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  int result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (int)(arg1)->GetMessageMaxLength();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetPublicAddress(void * jarg1) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  AddrPort result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (arg1)->GetPublicAddress();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new AddrPort((const AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_SetApplicationHint(void * jarg1, void * jarg2) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  CApplicationHint *arg2 = 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (CApplicationHint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CApplicationHint const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->SetApplicationHint((CApplicationHint const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetClient_SendUserMessage(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  RmiContext *arg3 = 0 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (RmiContext *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "RmiContext & type is null", 0);
    return 0;
  } 
  
  arg4 = (uint8_t*)(jarg4);
  
  arg5 = (int)jarg5; 
  {
    try {
      result = (bool)(arg1)->SendUserMessage(arg2,*arg3,arg4,arg5);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_SetCoalesceIntervalMs(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  int arg3 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (Proud::ErrorType)(arg1)->SetCoalesceIntervalMs(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_SetCoalesceIntervalToAuto(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (Proud::ErrorType)(arg1)->SetCoalesceIntervalToAuto(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetTcpLocalAddr(void * jarg1) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  AddrPort result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (arg1)->GetTcpLocalAddr();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new AddrPort((const AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetUdpLocalAddr(void * jarg1) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  AddrPort result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (arg1)->GetUdpLocalAddr();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new AddrPort((const AddrPort &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeNetClient_TEST_GetDebugText(void * jarg1) {
  char * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (arg1)->TEST_GetDebugText();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_TEST_FakeTurnOffSendAndReceive(void * jarg1) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      (arg1)->TEST_FakeTurnOffSendAndReceive();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_TEST_SetAutoConnectionRecoverySimulatedDelay(void * jarg1, int jarg2) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->TEST_SetAutoConnectionRecoverySimulatedDelay(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_ForceP2PRelay(void * jarg1, int jarg2, unsigned int jarg3) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  bool arg3 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (Proud::ErrorType)(arg1)->ForceP2PRelay(arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_HolsterMoreCallbackUntilNextFrameMove(void * jarg1) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      Proud_CNetClient_HolsterMoreCallbackUntilNextFrameMove(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_DisconnectAsync(void * jarg1) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      try {
        Proud_CNetClient_DisconnectAsync(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetClient_Connect__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::CNetConnectionParam *arg2 = (Proud::CNetConnectionParam *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::CNetConnectionParam *)jarg2; 
  {
    try {
      try {
        result = (bool)Proud_CNetClient_Connect__SWIG_0(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetClient_Connect__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::CNetConnectionParam *arg2 = (Proud::CNetConnectionParam *) 0 ;
  Proud::ErrorInfo *arg3 = (Proud::ErrorInfo *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::CNetConnectionParam *)jarg2; 
  arg3 = (Proud::ErrorInfo *)jarg3; 
  {
    try {
      result = (bool)Proud_CNetClient_Connect__SWIG_1(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_FrameMove__SWIG_0(void * jarg1) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      try {
        Proud_CNetClient_FrameMove__SWIG_0(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_FrameMove__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  int arg2 ;
  Proud::CFrameMoveResult *arg3 = (Proud::CFrameMoveResult *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Proud::CFrameMoveResult *)jarg3; 
  {
    try {
      try {
        Proud_CNetClient_FrameMove__SWIG_1(arg1,arg2,arg3);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetGroupMembers(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::HostIDArray result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = Proud_CNetClient_GetGroupMembers(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::HostIDArray((const Proud::HostIDArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetLocalJoinedP2PGroups(void * jarg1) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostIDArray result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = Proud_CNetClient_GetLocalJoinedP2PGroups(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::HostIDArray((const Proud::HostIDArray &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetStats(void * jarg1) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::CNetClientStats result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = Proud_CNetClient_GetStats(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CNetClientStats((const Proud::CNetClientStats &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetPeerInfo(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::CNetPeerInfo result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = Proud_CNetClient_GetPeerInfo(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CNetPeerInfo((const Proud::CNetPeerInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_InvalidateUdpSocket(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::CDirectP2PInfo result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = Proud_CNetClient_InvalidateUdpSocket(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CDirectP2PInfo((const Proud::CDirectP2PInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetPeerReliableUdpStats(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::ReliableUdpHostStats result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = Proud_CNetClient_GetPeerReliableUdpStats(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::ReliableUdpHostStats((const Proud::ReliableUdpHostStats &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetClient_IsLocalHostBehindNat(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  {
    try {
      result = (bool)Proud_CNetClient_IsLocalHostBehindNat(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetClient_GetSocketInfo(void * jarg1, int jarg2) {
  void * jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::CSocketInfo result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = Proud_CNetClient_GetSocketInfo(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::CSocketInfo((const Proud::CSocketInfo &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetUnreliableMessagingLossRatioPercent(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud_CNetClient_GetUnreliableMessagingLossRatioPercent(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetUnreliableMessagingLossRatioPercentErrorType(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (Proud::ErrorType)Proud_CNetClient_GetUnreliableMessagingLossRatioPercentErrorType(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_SetEventSink(void * jarg1, void * jarg2) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        Proud_CNetClient_SetEventSink(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_AttachProxy(void * jarg1, void * jarg2) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        Proud_CNetClient_AttachProxy(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetClient_AttachStub(void * jarg1, void * jarg2) {
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      try {
        Proud_CNetClient_AttachStub(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return ; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetLastUnreliablePingMs(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud_CNetClient_GetLastUnreliablePingMs(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NativeNetClient_GetLastUnreliablePingSec(void * jarg1, int jarg2) {
  double jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  double result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (double)Proud_CNetClient_GetLastUnreliablePingSec(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetLastReliablePingMs(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud_CNetClient_GetLastReliablePingMs(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NativeNetClient_GetLastReliablePingSec(void * jarg1, int jarg2) {
  double jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  double result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (double)Proud_CNetClient_GetLastReliablePingSec(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetRecentReliablePingMs(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud_CNetClient_GetRecentReliablePingMs(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NativeNetClient_GetRecentReliablePingSec(void * jarg1, int jarg2) {
  double jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  double result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (double)Proud_CNetClient_GetRecentReliablePingSec(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetClient_GetRecentUnreliablePingMs(void * jarg1, int jarg2) {
  int jresult ;
  Proud::CNetClient *arg1 = (Proud::CNetClient *) 0 ;
  Proud::HostID arg2 ;
  int result;
  
  arg1 = (Proud::CNetClient *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      result = (int)Proud_CNetClient_GetRecentUnreliablePingMs(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemoteOfflineEventArgs() {
  void * jresult ;
  Proud::CRemoteOfflineEventArgs *result = 0 ;
  
  {
    try {
      result = (Proud::CRemoteOfflineEventArgs *)new Proud::CRemoteOfflineEventArgs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOfflineEventArgs_remoteHostID_set(void * jarg1, int jarg2) {
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remoteHostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoteOfflineEventArgs_remoteHostID_get(void * jarg1) {
  int jresult ;
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remoteHostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOfflineEventArgs_m_errorInfo_set(void * jarg1, void * jarg2) {
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  Proud::ErrorInfo *arg2 = (Proud::ErrorInfo *) 0 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  arg2 = (Proud::ErrorInfo *)jarg2; 
  if (arg1) (arg1)->m_errorInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RemoteOfflineEventArgs_m_errorInfo_get(void * jarg1) {
  void * jresult ;
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  Proud::ErrorInfo *result = 0 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  result = (Proud::ErrorInfo *) ((arg1)->m_errorInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOfflineEventArgs_CopyFromNative(void * jarg1, void * jarg2) {
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      Proud_CRemoteOfflineEventArgs_CopyFromNative(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RemoteOfflineEventArgs(void * jarg1) {
  Proud::CRemoteOfflineEventArgs *arg1 = (Proud::CRemoteOfflineEventArgs *) 0 ;
  
  arg1 = (Proud::CRemoteOfflineEventArgs *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOnlineEventArgs_remoteHostID_set(void * jarg1, int jarg2) {
  Proud::CRemoteOnlineEventArgs *arg1 = (Proud::CRemoteOnlineEventArgs *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CRemoteOnlineEventArgs *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remoteHostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoteOnlineEventArgs_remoteHostID_get(void * jarg1) {
  int jresult ;
  Proud::CRemoteOnlineEventArgs *arg1 = (Proud::CRemoteOnlineEventArgs *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CRemoteOnlineEventArgs *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remoteHostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoteOnlineEventArgs_CopyFromNative(void * jarg1, void * jarg2) {
  Proud::CRemoteOnlineEventArgs *arg1 = (Proud::CRemoteOnlineEventArgs *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (Proud::CRemoteOnlineEventArgs *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      Proud_CRemoteOnlineEventArgs_CopyFromNative(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RemoteOnlineEventArgs() {
  void * jresult ;
  Proud::CRemoteOnlineEventArgs *result = 0 ;
  
  {
    try {
      result = (Proud::CRemoteOnlineEventArgs *)new Proud::CRemoteOnlineEventArgs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RemoteOnlineEventArgs(void * jarg1) {
  Proud::CRemoteOnlineEventArgs *arg1 = (Proud::CRemoteOnlineEventArgs *) 0 ;
  
  arg1 = (Proud::CRemoteOnlineEventArgs *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeException_m_remote_set(void * jarg1, int jarg2) {
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remote = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeException_m_remote_get(void * jarg1) {
  int jresult ;
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::Exception *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remote);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeException_m_exceptionType_set(void * jarg1, int jarg2) {
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::ExceptionType arg2 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  arg2 = (Proud::ExceptionType)jarg2; 
  if (arg1) (arg1)->m_exceptionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeException_m_exceptionType_get(void * jarg1) {
  int jresult ;
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::ExceptionType result;
  
  arg1 = (Proud::Exception *)jarg1; 
  result = (Proud::ExceptionType) ((arg1)->m_exceptionType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeException_m_userCallbackName_set(void * jarg1, char * jarg2) {
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_userCallbackName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeException_m_userCallbackName_get(void * jarg1) {
  char * jresult ;
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_userCallbackName);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeException__SWIG_0() {
  void * jresult ;
  Proud::Exception *result = 0 ;
  
  {
    try {
      result = (Proud::Exception *)new Proud::Exception();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeException__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  Proud::Exception *result = 0 ;
  
  arg1 = (char *)jarg1; 
  {
    try {
      result = (Proud::Exception *)new Proud::Exception((char const *)arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeException__SWIG_2(void * jarg1) {
  void * jresult ;
  Proud::ErrorInfo *arg1 = (Proud::ErrorInfo *) 0 ;
  Proud::Exception *result = 0 ;
  
  arg1 = (Proud::ErrorInfo *)jarg1; 
  {
    try {
      result = (Proud::Exception *)new Proud::Exception(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeException__SWIG_3(void * jarg1) {
  void * jresult ;
  Proud::Exception *arg1 = 0 ;
  Proud::Exception *result = 0 ;
  
  arg1 = (Proud::Exception *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::Exception const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (Proud::Exception *)new Proud::Exception((Proud::Exception const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeException(void * jarg1) {
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeException_what(void * jarg1) {
  char * jresult ;
  Proud::Exception *arg1 = (Proud::Exception *) 0 ;
  char *result = 0 ;
  
  arg1 = (Proud::Exception *)jarg1; 
  {
    try {
      result = (char *)((Proud::Exception const *)arg1)->what();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientWorkerInfo_connectCallCount_set(void * jarg1, int jarg2) {
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_connectCallCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientWorkerInfo_connectCallCount_get(void * jarg1) {
  int jresult ;
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int result;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  result = (int) ((arg1)->m_connectCallCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientWorkerInfo_disconnectCallCount_set(void * jarg1, int jarg2) {
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_disconnectCallCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientWorkerInfo_disconnectCallCount_get(void * jarg1) {
  int jresult ;
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int result;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  result = (int) ((arg1)->m_disconnectCallCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientWorkerInfo_connectionState_set(void * jarg1, int jarg2) {
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  Proud::ConnectionState arg2 ;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  arg2 = (Proud::ConnectionState)jarg2; 
  if (arg1) (arg1)->m_connectionState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientWorkerInfo_connectionState_get(void * jarg1) {
  int jresult ;
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  Proud::ConnectionState result;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  result = (Proud::ConnectionState) ((arg1)->m_connectionState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientWorkerInfo_finalWorkerItemCount_set(void * jarg1, int jarg2) {
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_finalWorkerItemCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientWorkerInfo_finalWorkerItemCount_get(void * jarg1) {
  int jresult ;
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int result;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  result = (int) ((arg1)->m_finalWorkerItemCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientWorkerInfo_currentTimeMs_set(void * jarg1, long long jarg2) {
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_currentTimeMs = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ClientWorkerInfo_currentTimeMs_get(void * jarg1) {
  long long jresult ;
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  result = (int64_t) ((arg1)->m_currentTimeMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientWorkerInfo_peerCount_set(void * jarg1, int jarg2) {
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_peerCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientWorkerInfo_peerCount_get(void * jarg1) {
  int jresult ;
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  int result;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  result = (int) ((arg1)->m_peerCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ClientWorkerInfo() {
  void * jresult ;
  Proud::CClientWorkerInfo *result = 0 ;
  
  {
    try {
      result = (Proud::CClientWorkerInfo *)new Proud::CClientWorkerInfo();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClientWorkerInfo(void * jarg1) {
  Proud::CClientWorkerInfo *arg1 = (Proud::CClientWorkerInfo *) 0 ;
  
  arg1 = (Proud::CClientWorkerInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SocketInfo() {
  void * jresult ;
  Proud::CSocketInfo *result = 0 ;
  
  {
    try {
      result = (Proud::CSocketInfo *)new Proud::CSocketInfo();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SocketInfo_GetTCPSocket(void * jarg1) {
  unsigned int jresult ;
  Proud::CSocketInfo *arg1 = (Proud::CSocketInfo *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CSocketInfo *)jarg1; 
  {
    try {
      result = (uint32_t)Proud_CSocketInfo_GetTCPSocket(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SocketInfo_GetUDPSocket(void * jarg1) {
  unsigned int jresult ;
  Proud::CSocketInfo *arg1 = (Proud::CSocketInfo *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CSocketInfo *)jarg1; 
  {
    try {
      result = (uint32_t)Proud_CSocketInfo_GetUDPSocket(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SocketInfo(void * jarg1) {
  Proud::CSocketInfo *arg1 = (Proud::CSocketInfo *) 0 ;
  
  arg1 = (Proud::CSocketInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ApplicationHint_recentFrameRate_set(void * jarg1, double jarg2) {
  Proud::CApplicationHint *arg1 = (Proud::CApplicationHint *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CApplicationHint *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_recentFrameRate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ApplicationHint_recentFrameRate_get(void * jarg1) {
  double jresult ;
  Proud::CApplicationHint *arg1 = (Proud::CApplicationHint *) 0 ;
  double result;
  
  arg1 = (Proud::CApplicationHint *)jarg1; 
  result = (double) ((arg1)->m_recentFrameRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ApplicationHint() {
  void * jresult ;
  Proud::CApplicationHint *result = 0 ;
  
  {
    try {
      result = (Proud::CApplicationHint *)new Proud::CApplicationHint();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ApplicationHint(void * jarg1) {
  Proud::CApplicationHint *arg1 = (Proud::CApplicationHint *) 0 ;
  
  arg1 = (Proud::CApplicationHint *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_receivedFrameCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_receivedFrameCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_receivedFrameCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_receivedFrameCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_receivedStreamCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_receivedStreamCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_receivedStreamCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_receivedStreamCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalReceivedStreamLength_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalReceivedStreamLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalReceivedStreamLength_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_totalReceivedStreamLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalAckFrameCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalAckFrameCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalAckFrameCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_totalAckFrameCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowLength_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_senderWindowLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowLength_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_senderWindowLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowMaxLength_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_senderWindowMaxLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowMaxLength_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_senderWindowMaxLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowWidth_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_senderWindowWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowWidth_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_senderWindowWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_expectedFrameNumberToReceive_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_expectedFrameNumberToReceive = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_expectedFrameNumberToReceive_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_expectedFrameNumberToReceive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_nextFrameNumberToSend_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_nextFrameNumberToSend = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_nextFrameNumberToSend_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_nextFrameNumberToSend);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_sendStreamCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_sendStreamCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_sendStreamCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_sendStreamCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowDataFrameCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_senderWindowDataFrameCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowDataFrameCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_senderWindowDataFrameCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_resendFrameCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_resendFrameCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_resendFrameCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_resendFrameCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalSendStreamLength_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalSendStreamLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalSendStreamLength_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_totalSendStreamLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalFirstSendCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalFirstSendCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalFirstSendCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_totalFirstSendCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalResendCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalResendCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalResendCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_totalResendCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowLastFrame_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_senderWindowLastFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_senderWindowLastFrame_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_senderWindowLastFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalReceiveDataCount_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_totalReceiveDataCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_totalReceiveDataCount_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_totalReceiveDataCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReliableUdpHostStats_m_lastReceivedAckNumber_set(void * jarg1, int jarg2) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_lastReceivedAckNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ReliableUdpHostStats_m_lastReceivedAckNumber_get(void * jarg1) {
  int jresult ;
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  int result;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  result = (int) ((arg1)->m_lastReceivedAckNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ReliableUdpHostStats() {
  void * jresult ;
  Proud::ReliableUdpHostStats *result = 0 ;
  
  {
    try {
      result = (Proud::ReliableUdpHostStats *)new Proud::ReliableUdpHostStats();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ReliableUdpHostStats(void * jarg1) {
  Proud::ReliableUdpHostStats *arg1 = (Proud::ReliableUdpHostStats *) 0 ;
  
  arg1 = (Proud::ReliableUdpHostStats *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DisconnectArgs_gracefulDisconnectTimeoutMs_set(void * jarg1, long long jarg2) {
  Proud::CDisconnectArgs *arg1 = (Proud::CDisconnectArgs *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::CDisconnectArgs *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_gracefulDisconnectTimeoutMs = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_DisconnectArgs_gracefulDisconnectTimeoutMs_get(void * jarg1) {
  long long jresult ;
  Proud::CDisconnectArgs *arg1 = (Proud::CDisconnectArgs *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CDisconnectArgs *)jarg1; 
  result = (int64_t) ((arg1)->m_gracefulDisconnectTimeoutMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DisconnectArgs_disconnectSleepIntervalMs_set(void * jarg1, unsigned int jarg2) {
  Proud::CDisconnectArgs *arg1 = (Proud::CDisconnectArgs *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CDisconnectArgs *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_disconnectSleepIntervalMs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DisconnectArgs_disconnectSleepIntervalMs_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CDisconnectArgs *arg1 = (Proud::CDisconnectArgs *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CDisconnectArgs *)jarg1; 
  result = (uint32_t) ((arg1)->m_disconnectSleepIntervalMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DisconnectArgs() {
  void * jresult ;
  Proud::CDisconnectArgs *result = 0 ;
  
  {
    try {
      result = (Proud::CDisconnectArgs *)new Proud::CDisconnectArgs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DisconnectArgs_GetNativeComment(void * jarg1) {
  void * jresult ;
  Proud::CDisconnectArgs *arg1 = (Proud::CDisconnectArgs *) 0 ;
  void *result = 0 ;
  
  arg1 = (Proud::CDisconnectArgs *)jarg1; 
  {
    try {
      result = (void *)Proud_CDisconnectArgs_GetNativeComment(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DisconnectArgs(void * jarg1) {
  Proud::CDisconnectArgs *arg1 = (Proud::CDisconnectArgs *) 0 ;
  
  arg1 = (Proud::CDisconnectArgs *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_PN_IPV6_ADDR_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)Proud::PN_IPV6_ADDR_LENGTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_InvalidSocket_get() {
  int jresult ;
  int result;
  
  result = (int)(int)Proud::InvalidSocket;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPort_port_set(void * jarg1, unsigned short jarg2) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_port = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AddrPort_port_get(void * jarg1) {
  unsigned short jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint16_t result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  result = (uint16_t) ((arg1)->m_port);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsIPv4MappedIPv6Addr(void * jarg1) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (bool)((Proud::AddrPort const *)arg1)->IsIPv4MappedIPv6Addr();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPort_SetIPv4MappedIPv6Address(void * jarg1, unsigned int jarg2) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->SetIPv4MappedIPv6Address(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPort_Synthesize(void * jarg1, void * jarg2, unsigned long jarg3, unsigned int jarg4) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  uint32_t arg4 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  
  arg2 = (uint8_t*)(jarg2);
  
  arg3 = (size_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  {
    try {
      (arg1)->Synthesize((uint8_t const *)arg2,arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsAddressEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  Proud::AddrPort *arg2 = 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::AddrPort const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((Proud::AddrPort const *)arg1)->IsAddressEqualTo((Proud::AddrPort const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AddrPort() {
  void * jresult ;
  Proud::AddrPort *result = 0 ;
  
  {
    try {
      result = (Proud::AddrPort *)new Proud::AddrPort();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AddrPort_IPToString(void * jarg1) {
  char * jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = ((Proud::AddrPort const *)arg1)->IPToString();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_FromIPPortV4(char * jarg1, unsigned short jarg2) {
  void * jresult ;
  Proud::String *arg1 = 0 ;
  uint16_t arg2 ;
  Proud::AddrPort result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  arg2 = (uint16_t)jarg2; 
  {
    try {
      result = Proud::AddrPort::FromIPPortV4((Proud::String const &)*arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_FromIPPortV6(char * jarg1, unsigned short jarg2) {
  void * jresult ;
  Proud::String *arg1 = 0 ;
  uint16_t arg2 ;
  Proud::AddrPort result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  arg2 = (uint16_t)jarg2; 
  {
    try {
      result = Proud::AddrPort::FromIPPortV6((Proud::String const &)*arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_FromIPPort(int jarg1, char * jarg2, unsigned short jarg3) {
  void * jresult ;
  int32_t *arg1 = 0 ;
  Proud::String *arg2 = 0 ;
  uint16_t arg3 ;
  int32_t temp1 ;
  Proud::AddrPort result;
  
  temp1 = (int32_t)jarg1; 
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  arg3 = (uint16_t)jarg3; 
  {
    try {
      result = Proud::AddrPort::FromIPPort((int const &)*arg1,(Proud::String const &)*arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_FromAnyIPPort(int jarg1, unsigned short jarg2) {
  void * jresult ;
  int32_t *arg1 = 0 ;
  uint16_t arg2 ;
  int32_t temp1 ;
  Proud::AddrPort result;
  
  temp1 = (int32_t)jarg1; 
  arg1 = &temp1; 
  arg2 = (uint16_t)jarg2; 
  {
    try {
      result = Proud::AddrPort::FromAnyIPPort((int const &)*arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_From(void * jarg1) {
  void * jresult ;
  Proud::NamedAddrPort *arg1 = 0 ;
  Proud::AddrPort result;
  
  arg1 = (Proud::NamedAddrPort *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::NamedAddrPort const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Proud::AddrPort::From((Proud::NamedAddrPort const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::AddrPort((const Proud::AddrPort &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddrPort_Unassigned_set(void * jarg1) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  Proud::AddrPort::Unassigned = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_Unassigned_get() {
  void * jresult ;
  Proud::AddrPort *result = 0 ;
  
  result = (Proud::AddrPort *)&Proud::AddrPort::Unassigned;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsUnicastEndpoint(void * jarg1) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (bool)((Proud::AddrPort const *)arg1)->IsUnicastEndpoint();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsAnyOrUnicastEndpoint(void * jarg1) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (bool)((Proud::AddrPort const *)arg1)->IsAnyOrUnicastEndpoint();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_IsEqualAddress(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = 0 ;
  Proud::AddrPort *arg2 = 0 ;
  bool result;
  
  arg1 = (Proud::AddrPort *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::AddrPort const & type is null", 0);
    return 0;
  } 
  arg2 = (Proud::AddrPort *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::AddrPort const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)Proud::AddrPort::IsEqualAddress((Proud::AddrPort const &)*arg1,(Proud::AddrPort const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddrPort_Hash(void * jarg1) {
  unsigned int jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (uint32_t)((Proud::AddrPort const *)arg1)->Hash();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddrPort_GetNativeIPAddr(void * jarg1) {
  void * jresult ;
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  void *result = 0 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      result = (void *)Proud_AddrPort_GetNativeIPAddr(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AddrPort(void * jarg1) {
  Proud::AddrPort *arg1 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::AddrPort *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamedAddrPort_addr_set(void * jarg1, char * jarg2) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  if (arg1) (arg1)->m_addr = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NamedAddrPort_addr_get(void * jarg1) {
  char * jresult ;
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  Proud::String *result = 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  result = (Proud::String *) & ((arg1)->m_addr);
  jresult = SWIG_csharp_string_callback(StringT2A(*result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamedAddrPort_port_set(void * jarg1, unsigned short jarg2) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_port = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NamedAddrPort_port_get(void * jarg1) {
  unsigned short jresult ;
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  uint16_t result;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  result = (uint16_t) ((arg1)->m_port);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamedAddrPort_Unassigned_set(void * jarg1) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  Proud::NamedAddrPort::Unassigned = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NamedAddrPort_Unassigned_get() {
  void * jresult ;
  Proud::NamedAddrPort *result = 0 ;
  
  result = (Proud::NamedAddrPort *)&Proud::NamedAddrPort::Unassigned;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NamedAddrPort_FromAddrPort(char * jarg1, unsigned short jarg2) {
  void * jresult ;
  Proud::String arg1 ;
  uint16_t arg2 ;
  Proud::NamedAddrPort result;
  
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg1 = StringA2T(jarg1, GetUTF8toUTF16());
  
  arg2 = (uint16_t)jarg2; 
  {
    try {
      result = Proud::NamedAddrPort::FromAddrPort(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::NamedAddrPort((const Proud::NamedAddrPort &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NamedAddrPort_From(void * jarg1) {
  void * jresult ;
  Proud::AddrPort *arg1 = 0 ;
  Proud::NamedAddrPort result;
  
  arg1 = (Proud::AddrPort *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::AddrPort const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Proud::NamedAddrPort::From((Proud::AddrPort const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = new Proud::NamedAddrPort((const Proud::NamedAddrPort &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NamedAddrPort_OverwriteHostNameIfExists(void * jarg1, char * jarg2) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  Proud::String *arg2 = 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  Proud::String arg2_str(StringA2T(jarg2, GetUTF8toUTF16()));
  arg2 = &arg2_str; 
  
  {
    try {
      (arg1)->OverwriteHostNameIfExists((Proud::String const &)*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NamedAddrPort_IsUnicastEndpoint(void * jarg1) {
  unsigned int jresult ;
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  bool result;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  {
    try {
      result = (bool)(arg1)->IsUnicastEndpoint();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NamedAddrPort() {
  void * jresult ;
  Proud::NamedAddrPort *result = 0 ;
  
  {
    try {
      result = (Proud::NamedAddrPort *)new Proud::NamedAddrPort();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NamedAddrPort(void * jarg1) {
  Proud::NamedAddrPort *arg1 = (Proud::NamedAddrPort *) 0 ;
  
  arg1 = (Proud::NamedAddrPort *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetUtil_GetIPVersionFromString(char * jarg1) {
  int jresult ;
  Proud::String *arg1 = 0 ;
  int result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (int)Proud::CNetUtil::GetIPVersionFromString((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetUtil_IsAddressAny(char * jarg1) {
  unsigned int jresult ;
  Proud::String *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (bool)Proud::CNetUtil::IsAddressAny((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetUtil_IsAddressUnspecified(char * jarg1) {
  unsigned int jresult ;
  Proud::String *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (bool)Proud::CNetUtil::IsAddressUnspecified((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetUtil_IsAddressPhysical(char * jarg1) {
  unsigned int jresult ;
  Proud::String *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (bool)Proud::CNetUtil::IsAddressPhysical((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeNetUtil_IsAddressLoopback(char * jarg1) {
  unsigned int jresult ;
  Proud::String *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  Proud::String arg1_str(StringA2T(jarg1, GetUTF8toUTF16()));
  arg1 = &arg1_str; 
  
  {
    try {
      result = (bool)Proud::CNetUtil::IsAddressLoopback((Proud::String const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeNetUtil_LocalIPAddresses_New() {
  void * jresult ;
  void *result = 0 ;
  
  {
    try {
      result = (void *)Proud_CNetUtil_LocalIPAddresses_New();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeNetUtil_LocalIPAddresses_Delete(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      Proud_CNetUtil_LocalIPAddresses_Delete(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeNetUtil_GetLocalIPAddresseCount(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  int result;
  
  arg1 = jarg1; 
  {
    try {
      try {
        result = (int)Proud_CNetUtil_GetLocalIPAddresseCount(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeNetUtil_GetLocalIPAddress(void * jarg1, int jarg2) {
  char * jresult ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  Proud::String result;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = Proud_CNetUtil_GetLocalIPAddress(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeNetUtil() {
  void * jresult ;
  Proud::CNetUtil *result = 0 ;
  
  {
    try {
      result = (Proud::CNetUtil *)new Proud::CNetUtil();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeNetUtil(void * jarg1) {
  Proud::CNetUtil *arg1 = (Proud::CNetUtil *) 0 ;
  
  arg1 = (Proud::CNetUtil *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeHostIDArray_add(void * jarg1, int jarg2) {
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      Proud_HostIDArray_add(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeHostIDArray_Clear(void * jarg1, int jarg2) {
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  {
    try {
      Proud_HostIDArray_Clear(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeHostIDArray_GetCount(void * jarg1) {
  int jresult ;
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  int result;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  {
    try {
      result = (int)Proud_HostIDArray_GetCount(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeHostIDArray_at(void * jarg1, int jarg2) {
  int jresult ;
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  int arg2 ;
  Proud::HostID result;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (Proud::HostID)Proud_HostIDArray_at(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeHostIDArray() {
  void * jresult ;
  Proud::HostIDArray *result = 0 ;
  
  {
    try {
      result = (Proud::HostIDArray *)new Proud::HostIDArray();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeHostIDArray(void * jarg1) {
  Proud::HostIDArray *arg1 = (Proud::HostIDArray *) 0 ;
  
  arg1 = (Proud::HostIDArray *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_HostIDSet_GetCount(void * jarg1) {
  int jresult ;
  Proud::HostIDSet *arg1 = (Proud::HostIDSet *) 0 ;
  int result;
  
  arg1 = (Proud::HostIDSet *)jarg1; 
  {
    try {
      result = (int)Proud_HostIDSet_GetCount(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HostIDSet() {
  void * jresult ;
  Proud::HostIDSet *result = 0 ;
  
  {
    try {
      result = (Proud::HostIDSet *)new Proud::HostIDSet();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HostIDSet(void * jarg1) {
  Proud::HostIDSet *arg1 = (Proud::HostIDSet *) 0 ;
  
  arg1 = (Proud::HostIDSet *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_udpAddrFromServer_set(void * jarg1, void * jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  Proud::AddrPort *arg2 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2; 
  if (arg1) (arg1)->m_UdpAddrFromServer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetPeerInfo_udpAddrFromServer_get(void * jarg1) {
  void * jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  Proud::AddrPort *result = 0 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (Proud::AddrPort *)& ((arg1)->m_UdpAddrFromServer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_udpAddrInternal_set(void * jarg1, void * jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  Proud::AddrPort *arg2 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2; 
  if (arg1) (arg1)->m_UdpAddrInternal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetPeerInfo_udpAddrInternal_get(void * jarg1) {
  void * jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  Proud::AddrPort *result = 0 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (Proud::AddrPort *)& ((arg1)->m_UdpAddrInternal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_hostID_set(void * jarg1, int jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_HostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetPeerInfo_hostID_get(void * jarg1) {
  int jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_HostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_relayedP2P_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_RelayedP2P = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetPeerInfo_relayedP2P_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (bool) ((arg1)->m_RelayedP2P);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_joinedP2PGroups_set(void * jarg1, void * jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  Proud::HostIDArray *arg2 = (Proud::HostIDArray *) 0 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (Proud::HostIDArray *)jarg2; 
  if (arg1) (arg1)->m_joinedP2PGroups = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NetPeerInfo_joinedP2PGroups_get(void * jarg1) {
  void * jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  Proud::HostIDArray *result = 0 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (Proud::HostIDArray *)& ((arg1)->m_joinedP2PGroups);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_isBehindNat_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_isBehindNat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetPeerInfo_isBehindNat_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (bool) ((arg1)->m_isBehindNat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_recentPingMs_set(void * jarg1, int jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_recentPingMs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetPeerInfo_recentPingMs_get(void * jarg1) {
  int jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  int result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (int) ((arg1)->m_recentPingMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_sendQueuedAmountInBytes_set(void * jarg1, int jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_sendQueuedAmountInBytes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetPeerInfo_sendQueuedAmountInBytes_get(void * jarg1) {
  int jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  int result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (int) ((arg1)->m_sendQueuedAmountInBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_directP2PPeerFrameRate_set(void * jarg1, double jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_directP2PPeerFrameRate = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NetPeerInfo_directP2PPeerFrameRate_get(void * jarg1) {
  double jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  double result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (double) ((arg1)->m_directP2PPeerFrameRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_toRemotePeerSendUdpMessageTrialCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toRemotePeerSendUdpMessageTrialCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetPeerInfo_toRemotePeerSendUdpMessageTrialCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (uint32_t) ((arg1)->m_toRemotePeerSendUdpMessageTrialCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_toRemotePeerSendUdpMessageSuccessCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_toRemotePeerSendUdpMessageSuccessCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetPeerInfo_toRemotePeerSendUdpMessageSuccessCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (uint32_t) ((arg1)->m_toRemotePeerSendUdpMessageSuccessCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_unreliableMessageReceiveSpeed_set(void * jarg1, long long jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_unreliableMessageReceiveSpeed = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetPeerInfo_unreliableMessageReceiveSpeed_get(void * jarg1) {
  long long jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (int64_t) ((arg1)->m_unreliableMessageReceiveSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetPeerInfo() {
  void * jresult ;
  Proud::CNetPeerInfo *result = 0 ;
  
  {
    try {
      result = (Proud::CNetPeerInfo *)new Proud::CNetPeerInfo();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetPeerInfo_ToString(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  bool arg2 ;
  Proud::String result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (arg1)->ToString(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetPeerInfo_m_udpSendDataTotalBytes_set(void * jarg1, long long jarg2) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_udpSendDataTotalBytes = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetPeerInfo_m_udpSendDataTotalBytes_get(void * jarg1) {
  long long jresult ;
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  int64_t result;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  result = (int64_t) ((arg1)->m_udpSendDataTotalBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetPeerInfo(void * jarg1) {
  Proud::CNetPeerInfo *arg1 = (Proud::CNetPeerInfo *) 0 ;
  
  arg1 = (Proud::CNetPeerInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendFailedRemote_m_hostID_set(void * jarg1, int jarg2) {
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_hostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SendFailedRemote_m_hostID_get(void * jarg1) {
  int jresult ;
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_hostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SendFailedRemote_m_reason_set(void * jarg1, int jarg2) {
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  Proud::ErrorType arg2 ;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  arg2 = (Proud::ErrorType)jarg2; 
  if (arg1) (arg1)->m_reason = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SendFailedRemote_m_reason_get(void * jarg1) {
  int jresult ;
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  Proud::ErrorType result;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  result = (Proud::ErrorType) ((arg1)->m_reason);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SendFailedRemote() {
  void * jresult ;
  Proud::SendFailedRemote *result = 0 ;
  
  {
    try {
      result = (Proud::SendFailedRemote *)new Proud::SendFailedRemote();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SendFailedRemote(void * jarg1) {
  Proud::SendFailedRemote *arg1 = (Proud::SendFailedRemote *) 0 ;
  
  arg1 = (Proud::SendFailedRemote *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_relayed_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_relayed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_relayed_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_relayed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_sentFrom_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_sentFrom = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_sentFrom_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_sentFrom);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_unreliableS2CRoutedMulticastMaxCount_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_unreliableS2CRoutedMulticastMaxCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_unreliableS2CRoutedMulticastMaxCount_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (int) ((arg1)->m_unreliableS2CRoutedMulticastMaxCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_unreliableS2CRoutedMulticastMaxPingMs_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_unreliableS2CRoutedMulticastMaxPingMs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_unreliableS2CRoutedMulticastMaxPingMs_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (int) ((arg1)->m_unreliableS2CRoutedMulticastMaxPingMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_maxDirectP2PMulticastCount_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_maxDirectP2PMulticastCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_maxDirectP2PMulticastCount_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (int) ((arg1)->m_maxDirectP2PMulticastCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_uniqueID_set(void * jarg1, long long jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_uniqueID = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NativeRmiContext_uniqueID_get(void * jarg1) {
  long long jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int64_t result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (int64_t) ((arg1)->m_uniqueID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_fillSendFailedRemotes_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_fillSendFailedRemotes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_fillSendFailedRemotes_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_fillSendFailedRemotes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_priority_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::MessagePriority arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (Proud::MessagePriority)jarg2; 
  if (arg1) (arg1)->m_priority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_priority_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::MessagePriority result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (Proud::MessagePriority) ((arg1)->m_priority);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_reliability_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::MessageReliability arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (Proud::MessageReliability)jarg2; 
  if (arg1) (arg1)->m_reliability = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_reliability_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::MessageReliability result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (Proud::MessageReliability) ((arg1)->m_reliability);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_enableLoopback_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableLoopback = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_enableLoopback_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_enableLoopback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_enableP2PJitTrigger_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_enableP2PJitTrigger = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_enableP2PJitTrigger_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_enableP2PJitTrigger);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_allowRelaySend_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_allowRelaySend = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_allowRelaySend_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_allowRelaySend);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_forceRelayThresholdRatio_set(void * jarg1, double jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  double arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_forceRelayThresholdRatio = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NativeRmiContext_forceRelayThresholdRatio_get(void * jarg1) {
  double jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  double result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (double) ((arg1)->m_forceRelayThresholdRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_INTERNAL_USE_isProudNetSpecificRmi_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_INTERNAL_USE_isProudNetSpecificRmi = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_INTERNAL_USE_isProudNetSpecificRmi_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_INTERNAL_USE_isProudNetSpecificRmi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_m_fragmentOnNeed_set(void * jarg1, unsigned int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_fragmentOnNeed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeRmiContext_m_fragmentOnNeed_get(void * jarg1) {
  unsigned int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  bool result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (bool) ((arg1)->m_fragmentOnNeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_encryptMode_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  EncryptMode arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (EncryptMode)jarg2; 
  if (arg1) (arg1)->m_encryptMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_encryptMode_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  EncryptMode result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (EncryptMode) ((arg1)->m_encryptMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_compressMode_set(void * jarg1, int jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  CompressMode arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (CompressMode)jarg2; 
  if (arg1) (arg1)->m_compressMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeRmiContext_compressMode_get(void * jarg1) {
  int jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  CompressMode result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (CompressMode) ((arg1)->m_compressMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeRmiContext_rmiID_set(void * jarg1, unsigned short jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::RmiID arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (Proud::RmiID)jarg2; 
  if (arg1) (arg1)->m_rmiID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NativeRmiContext_rmiID_get(void * jarg1) {
  unsigned short jresult ;
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  Proud::RmiID result;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  result = (Proud::RmiID) ((arg1)->m_rmiID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeRmiContext__SWIG_0() {
  void * jresult ;
  Proud::RmiContext *result = 0 ;
  
  {
    try {
      result = (Proud::RmiContext *)new Proud::RmiContext();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeRmiContext__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Proud::MessagePriority arg1 ;
  Proud::MessageReliability arg2 ;
  int arg3 ;
  EncryptMode arg4 ;
  Proud::RmiContext *result = 0 ;
  
  arg1 = (Proud::MessagePriority)jarg1; 
  arg2 = (Proud::MessageReliability)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (EncryptMode)jarg4; 
  {
    try {
      result = (Proud::RmiContext *)new Proud::RmiContext(arg1,arg2,arg3,arg4);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeRmiContext__SWIG_2(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Proud::MessagePriority arg1 ;
  Proud::MessageReliability arg2 ;
  int arg3 ;
  Proud::RmiContext *result = 0 ;
  
  arg1 = (Proud::MessagePriority)jarg1; 
  arg2 = (Proud::MessageReliability)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (Proud::RmiContext *)new Proud::RmiContext(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeRmiContext(void * jarg1) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Guid() {
  void * jresult ;
  Proud::Guid *result = 0 ;
  
  {
    try {
      result = (Proud::Guid *)new Proud::Guid();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Guid_ConvertStringToUUID(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  Proud::String arg1 ;
  Proud::Guid *arg2 = 0 ;
  bool result;
  
  
  // ikpil.choi 2017-01-09 : swig의 input이 Proud::String일 경우, A2T 실행하여 할당
  arg1 = StringA2T(jarg1, GetUTF8toUTF16());
  
  arg2 = (Proud::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::Guid & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)Proud::Guid::ConvertStringToUUID(arg1,*arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Guid_GetString__SWIG_0(void * jarg1) {
  char * jresult ;
  Proud::Guid *arg1 = 0 ;
  Proud::String result;
  
  arg1 = (Proud::Guid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::Guid const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Proud::Guid::GetString((Proud::Guid const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Guid_GetBracketString(void * jarg1) {
  char * jresult ;
  Proud::Guid *arg1 = 0 ;
  Proud::String result;
  
  arg1 = (Proud::Guid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Proud::Guid const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = Proud::Guid::GetBracketString((Proud::Guid const &)*arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Guid_CopyManagedByteArrayToNativeGuid(void * jarg1, void * jarg2, int jarg3) {
  Proud::Guid *arg1 = (Proud::Guid *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  
  arg1 = (Proud::Guid *)jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      Proud_Guid_CopyManagedByteArrayToNativeGuid(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Guid(void * jarg1) {
  Proud::Guid *arg1 = (Proud::Guid *) 0 ;
  
  arg1 = (Proud::Guid *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeByteArray() {
  void * jresult ;
  Proud::ByteArray *result = 0 ;
  
  {
    try {
      result = (Proud::ByteArray *)new Proud::ByteArray();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeByteArray(void * jarg1) {
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NativeByteArray_ToHexString(void * jarg1) {
  char * jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  Proud::String result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  {
    try {
      result = (arg1)->ToHexString();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeByteArray_Hash(void * jarg1) {
  unsigned int jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  {
    try {
      result = (uint32_t)((Proud::ByteArray const *)arg1)->Hash();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeByteArray_Add(void * jarg1, unsigned char jarg2) {
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  {
    try {
      Proud_ByteArray_Add(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeByteArray_Clear(void * jarg1, unsigned char jarg2) {
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  {
    try {
      Proud_ByteArray_Clear(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeByteArray_GetCount(void * jarg1) {
  int jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  int result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  {
    try {
      result = (int)Proud_ByteArray_GetCount(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NativeByteArray_At(void * jarg1, int jarg2) {
  unsigned char jresult ;
  Proud::ByteArray *arg1 = (Proud::ByteArray *) 0 ;
  int arg2 ;
  uint8_t result;
  
  arg1 = (Proud::ByteArray *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (uint8_t)Proud_ByteArray_At(arg1,arg2);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalTcpReceiveCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalTcpReceiveCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalTcpReceiveCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalTcpReceiveCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalTcpReceiveBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalTcpReceiveBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalTcpReceiveBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalTcpReceiveBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalTcpSendCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalTcpSendCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalTcpSendCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalTcpSendCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalTcpSendBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalTcpSendBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalTcpSendBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalTcpSendBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalUdpReceiveCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalUdpReceiveCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalUdpReceiveCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalUdpReceiveCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalUdpReceiveBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalUdpReceiveBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalUdpReceiveBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalUdpReceiveBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalUdpSendCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalUdpSendCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalUdpSendCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalUdpSendCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_totalUdpSendBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalUdpSendBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_totalUdpSendBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalUdpSendBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketReceiveCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalWebSocketReceiveCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketReceiveCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalWebSocketReceiveCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketReceiveBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalWebSocketReceiveBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketReceiveBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalWebSocketReceiveBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketSendCount_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalWebSocketSendCount = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketSendCount_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalWebSocketSendCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketSendBytes_set(void * jarg1, unsigned long long jarg2) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->m_totalWebSocketSendBytes = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_m_totalWebSocketSendBytes_get(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  result = (uint64_t) ((arg1)->m_totalWebSocketSendBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_GetTotalReceiveBytes(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      result = (uint64_t)(arg1)->GetTotalReceiveBytes();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_GetTotalSendCount(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      result = (uint64_t)(arg1)->GetTotalSendCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_GetTotalReceiveCount(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      result = (uint64_t)(arg1)->GetTotalReceiveCount();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NetCoreStats_GetTotalSendBytes(void * jarg1) {
  unsigned long long jresult ;
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  uint64_t result;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      result = (uint64_t)(arg1)->GetTotalSendBytes();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetCoreStats(void * jarg1) {
  Proud::CNetCoreStats *arg1 = (Proud::CNetCoreStats *) 0 ;
  
  arg1 = (Proud::CNetCoreStats *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientStats_remotePeerCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_remotePeerCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientStats_remotePeerCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_remotePeerCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientStats_serverUdpEnabled_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_serverUdpEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientStats_serverUdpEnabled_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  bool result;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  result = (bool) ((arg1)->m_serverUdpEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientStats_directP2PEnabledPeerCount_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_directP2PEnabledPeerCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientStats_directP2PEnabledPeerCount_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_directP2PEnabledPeerCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientStats_m_sendQueueTotalBytes_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_sendQueueTotalBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientStats_m_sendQueueTotalBytes_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_sendQueueTotalBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientStats_m_sendQueueTcpTotalBytes_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_sendQueueTcpTotalBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientStats_m_sendQueueTcpTotalBytes_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_sendQueueTcpTotalBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientStats_m_sendQueueUdpTotalBytes_set(void * jarg1, unsigned int jarg2) {
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_sendQueueUdpTotalBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientStats_m_sendQueueUdpTotalBytes_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  uint32_t result;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  result = (uint32_t) ((arg1)->m_sendQueueUdpTotalBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetClientStats() {
  void * jresult ;
  Proud::CNetClientStats *result = 0 ;
  
  {
    try {
      result = (Proud::CNetClientStats *)new Proud::CNetClientStats();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetClientStats(void * jarg1) {
  Proud::CNetClientStats *arg1 = (Proud::CNetClientStats *) 0 ;
  
  arg1 = (Proud::CNetClientStats *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpIssueRecvLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpIssueRecvLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UdpIssueRecvLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpIssueRecvLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpRecvBufferLength_Client_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpRecvBufferLength_Client = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UdpRecvBufferLength_Client_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpRecvBufferLength_Client;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpRecvBufferLength_Server_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpRecvBufferLength_Server = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UdpRecvBufferLength_Server_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpRecvBufferLength_Server;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpRecvBufferLength_ServerStaticAssigned_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpRecvBufferLength_ServerStaticAssigned = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UdpRecvBufferLength_ServerStaticAssigned_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpRecvBufferLength_ServerStaticAssigned;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_TcpIssueRecvLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::TcpIssueRecvLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_TcpIssueRecvLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::TcpIssueRecvLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_TcpRecvBufferLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::TcpRecvBufferLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_TcpRecvBufferLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::TcpRecvBufferLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_TcpSendBufferLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::TcpSendBufferLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_TcpSendBufferLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::TcpSendBufferLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpSendBufferLength_Client_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpSendBufferLength_Client = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UdpSendBufferLength_Client_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpSendBufferLength_Client;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpSendBufferLength_Server_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpSendBufferLength_Server = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UdpSendBufferLength_Server_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpSendBufferLength_Server;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpSendBufferLength_ServerStaticAssigned_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpSendBufferLength_ServerStaticAssigned = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UdpSendBufferLength_ServerStaticAssigned_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpSendBufferLength_ServerStaticAssigned;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableSocketTcpKeepAliveOption_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableSocketTcpKeepAliveOption = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableSocketTcpKeepAliveOption_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableSocketTcpKeepAliveOption;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ReliableUdpHeartbeatIntervalMs_Real_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReliableUdpHeartbeatIntervalMs_Real = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ReliableUdpHeartbeatIntervalMs_Real_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReliableUdpHeartbeatIntervalMs_Real;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ReliableUdpHeartbeatIntervalMs_ForDummyTest_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReliableUdpHeartbeatIntervalMs_ForDummyTest = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ReliableUdpHeartbeatIntervalMs_ForDummyTest_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReliableUdpHeartbeatIntervalMs_ForDummyTest;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_TcpSocketConnectTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::TcpSocketConnectTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_TcpSocketConnectTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::TcpSocketConnectTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ClientConnectServerTimeoutTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ClientConnectServerTimeoutTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ClientConnectServerTimeoutTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ClientConnectServerTimeoutTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DefaultConnectionTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::DefaultConnectionTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_DefaultConnectionTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::DefaultConnectionTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MinConnectionTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MinConnectionTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_MinConnectionTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MinConnectionTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MaxConnectionTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MaxConnectionTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_MaxConnectionTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MaxConnectionTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_WaitCompletionTimeoutMs_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  Proud::CNetConfig::WaitCompletionTimeoutMs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_WaitCompletionTimeoutMs_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)Proud::CNetConfig::WaitCompletionTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_HeartbeatIntervalMs_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  Proud::CNetConfig::HeartbeatIntervalMs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_HeartbeatIntervalMs_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)Proud::CNetConfig::HeartbeatIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_GarbageCollectIntervalMs_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  Proud::CNetConfig::GarbageCollectIntervalMs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_GarbageCollectIntervalMs_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)Proud::CNetConfig::GarbageCollectIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ServerHolepunchIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ServerHolepunchIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ServerHolepunchIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ServerHolepunchIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpHolepunchIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::UdpHolepunchIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_UdpHolepunchIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::UdpHolepunchIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ServerUdpRepunchIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ServerUdpRepunchIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ServerUdpRepunchIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ServerUdpRepunchIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ServerUdpRepunchMaxTrialCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ServerUdpRepunchMaxTrialCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_ServerUdpRepunchMaxTrialCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ServerUdpRepunchMaxTrialCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ServerUdpHolepunchMaxTrialCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ServerUdpHolepunchMaxTrialCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_ServerUdpHolepunchMaxTrialCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ServerUdpHolepunchMaxTrialCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_P2PHolepunchIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::P2PHolepunchIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_P2PHolepunchIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::P2PHolepunchIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_P2PShotgunStartTurn_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::P2PShotgunStartTurn = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_P2PShotgunStartTurn_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::P2PShotgunStartTurn;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_P2PHolepunchMaxTurnCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::P2PHolepunchMaxTurnCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_P2PHolepunchMaxTurnCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::P2PHolepunchMaxTurnCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_PurgeTooOldUnmatureClientTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::PurgeTooOldUnmatureClientTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_PurgeTooOldUnmatureClientTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::PurgeTooOldUnmatureClientTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_PurgeTooOldAddMemberAckTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::PurgeTooOldAddMemberAckTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_PurgeTooOldAddMemberAckTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::PurgeTooOldAddMemberAckTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DisposeGarbagedHostsTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::DisposeGarbagedHostsTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_DisposeGarbagedHostsTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::DisposeGarbagedHostsTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_RemoveTooOldUdpSendPacketQueueTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::RemoveTooOldUdpSendPacketQueueTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_RemoveTooOldUdpSendPacketQueueTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::RemoveTooOldUdpSendPacketQueueTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_AssembleFraggedPacketTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::AssembleFraggedPacketTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_AssembleFraggedPacketTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::AssembleFraggedPacketTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnablePacketDefragWarning_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnablePacketDefragWarning = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnablePacketDefragWarning_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnablePacketDefragWarning;
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_GetP2PHolepunchEndTimeMs() {
  long long jresult ;
  int64_t result;
  
  {
    try {
      result = (int64_t)Proud::CNetConfig::GetP2PHolepunchEndTimeMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ShotgunTrialCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ShotgunTrialCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_ShotgunTrialCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ShotgunTrialCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ShotgunRange_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ShotgunRange = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_ShotgunRange_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ShotgunRange;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UnreliablePingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::UnreliablePingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_UnreliablePingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::UnreliablePingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ReliablePingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReliablePingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ReliablePingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReliablePingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UseReportRealUdpCount_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::UseReportRealUdpCount = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_UseReportRealUdpCount_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::UseReportRealUdpCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ReportRealUdpCountIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReportRealUdpCountIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ReportRealUdpCountIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReportRealUdpCountIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_LanClientHeartbeatIntervalMs_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  Proud::CNetConfig::LanClientHeartbeatIntervalMs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_LanClientHeartbeatIntervalMs_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)Proud::CNetConfig::LanClientHeartbeatIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_LanPeerConnectPeerTimeoutTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::LanPeerConnectPeerTimeoutTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_LanPeerConnectPeerTimeoutTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::LanPeerConnectPeerTimeoutTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_PurgeTooOldJoiningTimeOutIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::PurgeTooOldJoiningTimeOutIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_PurgeTooOldJoiningTimeOutIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::PurgeTooOldJoiningTimeOutIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_RemoveLookaheadMessageTimeoutIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::RemoveLookaheadMessageTimeoutIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_RemoveLookaheadMessageTimeoutIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::RemoveLookaheadMessageTimeoutIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_RecyclePairReuseTimeMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::RecyclePairReuseTimeMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_RecyclePairReuseTimeMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::RecyclePairReuseTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_GarbageTooOldRecyclableUdpSocketsIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::GarbageTooOldRecyclableUdpSocketsIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_GarbageTooOldRecyclableUdpSocketsIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::GarbageTooOldRecyclableUdpSocketsIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ServerUdpSocketLatentCloseMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::ServerUdpSocketLatentCloseMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_ServerUdpSocketLatentCloseMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::ServerUdpSocketLatentCloseMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_TcpInDangerThresholdMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::TcpInDangerThresholdMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_TcpInDangerThresholdMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::TcpInDangerThresholdMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_TcpUnstableDetectionWaitTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::TcpUnstableDetectionWaitTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_TcpUnstableDetectionWaitTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::TcpUnstableDetectionWaitTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_PauseUdpSendDurationOnTcpInDangerMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::PauseUdpSendDurationOnTcpInDangerMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_PauseUdpSendDurationOnTcpInDangerMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::PauseUdpSendDurationOnTcpInDangerMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_RecentAssemblyingPacketIDsClearIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::RecentAssemblyingPacketIDsClearIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_RecentAssemblyingPacketIDsClearIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::RecentAssemblyingPacketIDsClearIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_AutoConnectionRecoveryTimeoutTimeMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::AutoConnectionRecoveryTimeoutTimeMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_AutoConnectionRecoveryTimeoutTimeMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::AutoConnectionRecoveryTimeoutTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_AutoConnectionRecoveryTimeoutMinTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::AutoConnectionRecoveryTimeoutMinTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_AutoConnectionRecoveryTimeoutMinTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::AutoConnectionRecoveryTimeoutMinTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::AutoConnectionRecoveryRefreshServerAddrInfoTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EveryRemoteIssueSendOnNeedIntervalMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::EveryRemoteIssueSendOnNeedIntervalMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_EveryRemoteIssueSendOnNeedIntervalMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::EveryRemoteIssueSendOnNeedIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_GetFallbackServerUdpToTcpTimeoutMs() {
  long long jresult ;
  int64_t result;
  
  {
    try {
      result = (int64_t)Proud::CNetConfig::GetFallbackServerUdpToTcpTimeoutMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_GetFallbackP2PUdpToTcpTimeoutMs() {
  long long jresult ;
  int64_t result;
  
  {
    try {
      result = (int64_t)Proud::CNetConfig::GetFallbackP2PUdpToTcpTimeoutMs();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DefaultNoPingTimeoutTimeMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::DefaultNoPingTimeoutTimeMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_DefaultNoPingTimeoutTimeMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::DefaultNoPingTimeoutTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_LagLinearProgrammingFactorPercent_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::LagLinearProgrammingFactorPercent = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_LagLinearProgrammingFactorPercent_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::LagLinearProgrammingFactorPercent;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_StreamGrowBy_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::StreamGrowBy = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_StreamGrowBy_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::StreamGrowBy;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_InternalNetVersion_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::InternalNetVersion = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_InternalNetVersion_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::InternalNetVersion;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_InternalLanVersion_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::InternalLanVersion = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_InternalLanVersion_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::InternalLanVersion;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NetClientConfig_GetVersion() {
  char * jresult ;
  Proud::String result;
  
  {
    try {
      result = Proud::CNetConfig::GetVersion();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MtuLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MtuLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_MtuLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MtuLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ElectSuperPeerIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ElectSuperPeerIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ElectSuperPeerIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ElectSuperPeerIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_MessageMinLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MessageMinLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MessageMaxLength_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MessageMaxLength = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_MessageMaxLength_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MessageMaxLength;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DefaultGracefulDisconnectTimeoutMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::DefaultGracefulDisconnectTimeoutMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_DefaultGracefulDisconnectTimeoutMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::DefaultGracefulDisconnectTimeoutMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MaxS2CMulticastRouteCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MaxS2CMulticastRouteCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_MaxS2CMulticastRouteCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MaxS2CMulticastRouteCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UnreliableS2CRoutedMulticastMaxPingDefaultMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UnreliableS2CRoutedMulticastMaxPingDefaultMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UnreliableS2CRoutedMulticastMaxPingDefaultMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UnreliableS2CRoutedMulticastMaxPingDefaultMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ForceCompressedRelayDestListOnly_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::ForceCompressedRelayDestListOnly = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_ForceCompressedRelayDestListOnly_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::ForceCompressedRelayDestListOnly;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_MaxConnectionCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MaxConnectionCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_OrdinaryHeavyS2CMulticastCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::OrdinaryHeavyS2CMulticastCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableTestSplitter_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableTestSplitter;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_ClientListHashTableValue_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Proud::CNetConfig::ClientListHashTableValue;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableSpeedHackDetectorByDefault_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableSpeedHackDetectorByDefault = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableSpeedHackDetectorByDefault_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableSpeedHackDetectorByDefault;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableMessagePriority_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableMessagePriority = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableMessagePriority_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableMessagePriority;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_SpeedHackDetectorPingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::SpeedHackDetectorPingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_SpeedHackDetectorPingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::SpeedHackDetectorPingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DefaultMaxDirectP2PMulticastCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::DefaultMaxDirectP2PMulticastCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_DefaultMaxDirectP2PMulticastCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::DefaultMaxDirectP2PMulticastCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UpnpDetectNatDeviceByDefault_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::UpnpDetectNatDeviceByDefault = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_UpnpDetectNatDeviceByDefault_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::UpnpDetectNatDeviceByDefault;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UpnpTcpAddPortMappingByDefault_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::UpnpTcpAddPortMappingByDefault = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_UpnpTcpAddPortMappingByDefault_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::UpnpTcpAddPortMappingByDefault;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MeasureClientSendSpeedIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MeasureClientSendSpeedIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_MeasureClientSendSpeedIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MeasureClientSendSpeedIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MeasureSendSpeedDurationMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MeasureSendSpeedDurationMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_MeasureSendSpeedDurationMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MeasureSendSpeedDurationMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DefaultDirectP2PStartCondition_set(int jarg1) {
  Proud::DirectP2PStartCondition arg1 ;
  
  arg1 = (Proud::DirectP2PStartCondition)jarg1; 
  Proud::CNetConfig::DefaultDirectP2PStartCondition = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_DefaultDirectP2PStartCondition_get() {
  int jresult ;
  Proud::DirectP2PStartCondition result;
  
  result = (Proud::DirectP2PStartCondition)Proud::CNetConfig::DefaultDirectP2PStartCondition;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_CatchUnhandledException_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::CatchUnhandledException = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_CatchUnhandledException_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::CatchUnhandledException;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_NetworkerThreadPriorityIsHigh_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::NetworkerThreadPriorityIsHigh = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_NetworkerThreadPriorityIsHigh_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::NetworkerThreadPriorityIsHigh;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableAbortiveSocketClose_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableAbortiveSocketClose = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableAbortiveSocketClose_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableAbortiveSocketClose;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableObjectPooling_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableObjectPooling = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableObjectPooling_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableObjectPooling;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableSocketReuseAddress_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableSocketReuseAddress = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableSocketReuseAddress_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableSocketReuseAddress;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ReportLanP2PPeerPingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReportLanP2PPeerPingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ReportLanP2PPeerPingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReportLanP2PPeerPingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ReportP2PPeerPingTestIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReportP2PPeerPingTestIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ReportP2PPeerPingTestIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReportP2PPeerPingTestIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ReportServerTimeAndPingIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ReportServerTimeAndPingIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ReportServerTimeAndPingIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ReportServerTimeAndPingIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_LongIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::LongIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_LongIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::LongIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MinSendSpeed_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MinSendSpeed = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_MinSendSpeed_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MinSendSpeed;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DefaultOverSendSuspectingThresholdInBytes_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::DefaultOverSendSuspectingThresholdInBytes = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_DefaultOverSendSuspectingThresholdInBytes_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::DefaultOverSendSuspectingThresholdInBytes;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ForceUnsafeHeapToSafeHeap_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::ForceUnsafeHeapToSafeHeap = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_ForceUnsafeHeapToSafeHeap_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::ForceUnsafeHeapToSafeHeap;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableSendBrake_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableSendBrake = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableSendBrake_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableSendBrake;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UdpCongestionControl_MinPacketLossPercent_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::UdpCongestionControl_MinPacketLossPercent = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_UdpCongestionControl_MinPacketLossPercent_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::UdpCongestionControl_MinPacketLossPercent;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_VizReconnectTryIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::VizReconnectTryIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_VizReconnectTryIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::VizReconnectTryIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_SuperPeerSelectionPremiumMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::SuperPeerSelectionPremiumMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_SuperPeerSelectionPremiumMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::SuperPeerSelectionPremiumMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_HostIDRecycleAllowTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::HostIDRecycleAllowTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_HostIDRecycleAllowTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::HostIDRecycleAllowTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_SendQueueHeavyWarningCapacity_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::SendQueueHeavyWarningCapacity = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_SendQueueHeavyWarningCapacity_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::SendQueueHeavyWarningCapacity;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_SendQueueHeavyWarningTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::SendQueueHeavyWarningTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_SendQueueHeavyWarningTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::SendQueueHeavyWarningTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_SendQueueHeavyWarningCheckCoolTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::SendQueueHeavyWarningCheckCoolTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_SendQueueHeavyWarningCheckCoolTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::SendQueueHeavyWarningCheckCoolTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UpdateNetClientStatCloneCoolTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::UpdateNetClientStatCloneCoolTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_UpdateNetClientStatCloneCoolTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::UpdateNetClientStatCloneCoolTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableErrorReportToNettention_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableErrorReportToNettention = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableErrorReportToNettention_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableErrorReportToNettention;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ManagerGarbageFreeTimeMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::ManagerGarbageFreeTimeMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_ManagerGarbageFreeTimeMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::ManagerGarbageFreeTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ManagerAverageElapsedTimeCollectCount_set(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  Proud::CNetConfig::ManagerAverageElapsedTimeCollectCount = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_ManagerAverageElapsedTimeCollectCount_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)Proud::CNetConfig::ManagerAverageElapsedTimeCollectCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableStarvationWarning_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableStarvationWarning = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableStarvationWarning_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableStarvationWarning;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_FraggingOnNeedByDefault_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::FraggingOnNeedByDefault = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_FraggingOnNeedByDefault_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::FraggingOnNeedByDefault;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_CheckDeadLock_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::CheckDeadLock = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_CheckDeadLock_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::CheckDeadLock;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_UseIsSameLanToLocalForMaxDirectP2PMulticast_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::UseIsSameLanToLocalForMaxDirectP2PMulticast = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_UseIsSameLanToLocalForMaxDirectP2PMulticast_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::UseIsSameLanToLocalForMaxDirectP2PMulticast;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_TcpSendMaxAmount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::TcpSendMaxAmount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_TcpSendMaxAmount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::TcpSendMaxAmount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ConcealDeadlockOnDisconnect_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::ConcealDeadlockOnDisconnect = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_ConcealDeadlockOnDisconnect_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::ConcealDeadlockOnDisconnect;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MessageOverloadWarningLimit_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MessageOverloadWarningLimit = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_MessageOverloadWarningLimit_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MessageOverloadWarningLimit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MessageOverloadWarningLimitTimeMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::MessageOverloadWarningLimitTimeMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_MessageOverloadWarningLimitTimeMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::MessageOverloadWarningLimitTimeMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MessageOverloadTimerIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::MessageOverloadTimerIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_MessageOverloadTimerIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::MessageOverloadTimerIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_LanRemotePeerHeartBeatTimerIntervalMs_set(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  Proud::CNetConfig::LanRemotePeerHeartBeatTimerIntervalMs = arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_LanRemotePeerHeartBeatTimerIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)Proud::CNetConfig::LanRemotePeerHeartBeatTimerIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_AssertTimeoutTimeAppropriate(long long jarg1) {
  int64_t arg1 ;
  
  arg1 = (int64_t)jarg1; 
  {
    try {
      Proud::CNetConfig::AssertTimeoutTimeAppropriate(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_P2PFallbackTcpRelayResendTimeIntervalMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::P2PFallbackTcpRelayResendTimeIntervalMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_P2PFallbackTcpRelayResendTimeIntervalMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::P2PFallbackTcpRelayResendTimeIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_CleanUpOldPacketIntervalMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::CleanUpOldPacketIntervalMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_CleanUpOldPacketIntervalMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::CleanUpOldPacketIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_NormalizePacketIntervalMs_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Proud::CNetConfig::NormalizePacketIntervalMs = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_NormalizePacketIntervalMs_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::NormalizePacketIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ThrowExceptionIfMessageLengthOutOfRange(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      Proud::CNetConfig::ThrowExceptionIfMessageLengthOutOfRange(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_MessageRecovery_MessageIDAckIntervalMs_set(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  Proud::CNetConfig::MessageRecovery_MessageIDAckIntervalMs = arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_NetClientConfig_MessageRecovery_MessageIDAckIntervalMs_get() {
  double jresult ;
  double result;
  
  result = (double)Proud::CNetConfig::MessageRecovery_MessageIDAckIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_ListenSocket_RetryOnInvalidArgError_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::ListenSocket_RetryOnInvalidArgError = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_ListenSocket_RetryOnInvalidArgError_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::ListenSocket_RetryOnInvalidArgError;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_AllowOutputDebugString_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::AllowOutputDebugString = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_AllowOutputDebugString_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::AllowOutputDebugString;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DefensiveSendReadyListAdd_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::DefensiveSendReadyListAdd = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_DefensiveSendReadyListAdd_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::DefensiveSendReadyListAdd;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_DefensiveCustomValueEvent_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::DefensiveCustomValueEvent = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_DefensiveCustomValueEvent_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::DefensiveCustomValueEvent;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnablePeriodicDetectingTransitionNetwork_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnablePeriodicDetectingTransitionNetwork = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnablePeriodicDetectingTransitionNetwork_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnablePeriodicDetectingTransitionNetwork;
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_NetClientConfig_WaitForSendingDummyPacketIntervalMs_get() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)(int64_t)Proud::CNetConfig::WaitForSendingDummyPacketIntervalMs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientConfig_EnableAutoConnectionRecoveryOnServer_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  Proud::CNetConfig::EnableAutoConnectionRecoveryOnServer = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NetClientConfig_EnableAutoConnectionRecoveryOnServer_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)Proud::CNetConfig::EnableAutoConnectionRecoveryOnServer;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NetClientConfig_RountTripLatencyTestMaxCount_get() {
  int jresult ;
  int result;
  
  result = (int)Proud::CNetConfig::RountTripLatencyTestMaxCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NetClientConfig() {
  void * jresult ;
  Proud::CNetConfig *result = 0 ;
  
  {
    try {
      result = (Proud::CNetConfig *)new Proud::CNetConfig();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NetClientConfig(void * jarg1) {
  Proud::CNetConfig *arg1 = (Proud::CNetConfig *) 0 ;
  
  arg1 = (Proud::CNetConfig *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IThreadPoolEvent_OnThreadBegin(void * jarg1) {
  Proud::IThreadPoolEvent *arg1 = (Proud::IThreadPoolEvent *) 0 ;
  
  arg1 = (Proud::IThreadPoolEvent *)jarg1; 
  {
    try {
      (arg1)->OnThreadBegin();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IThreadPoolEvent_OnThreadEnd(void * jarg1) {
  Proud::IThreadPoolEvent *arg1 = (Proud::IThreadPoolEvent *) 0 ;
  
  arg1 = (Proud::IThreadPoolEvent *)jarg1; 
  {
    try {
      (arg1)->OnThreadEnd();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IThreadPoolEvent(void * jarg1) {
  Proud::IThreadPoolEvent *arg1 = (Proud::IThreadPoolEvent *) 0 ;
  
  arg1 = (Proud::IThreadPoolEvent *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeThreadPool(void * jarg1) {
  Proud::CThreadPool *arg1 = (Proud::CThreadPool *) 0 ;
  
  arg1 = (Proud::CThreadPool *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeThreadPool_SetDesiredThreadCount(void * jarg1, int jarg2) {
  Proud::CThreadPool *arg1 = (Proud::CThreadPool *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CThreadPool *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->SetDesiredThreadCount(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeThreadPool_Process(void * jarg1, int jarg2) {
  Proud::CThreadPool *arg1 = (Proud::CThreadPool *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CThreadPool *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->Process(arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeThreadPool_Create(int jarg1) {
  void * jresult ;
  int arg1 ;
  Proud::CThreadPool *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (Proud::CThreadPool *)Proud_CThreadPool_Create(arg1);
      }
      catch(Proud::Exception &_e) {
        (void)_e;
        SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ Proud::Exception exception thrown");
        return 0; 
      }
      
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeReceivedMessage_remoteHostID_set(void * jarg1, int jarg2) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  Proud::HostID arg2 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  arg2 = (Proud::HostID)jarg2; 
  if (arg1) (arg1)->m_remoteHostID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeReceivedMessage_remoteHostID_get(void * jarg1) {
  int jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  Proud::HostID result;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  result = (Proud::HostID) ((arg1)->m_remoteHostID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeReceivedMessage_remoteAddr_onlyUdp_set(void * jarg1, void * jarg2) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  Proud::AddrPort *arg2 = (Proud::AddrPort *) 0 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  arg2 = (Proud::AddrPort *)jarg2; 
  if (arg1) (arg1)->m_remoteAddr_onlyUdp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeReceivedMessage_remoteAddr_onlyUdp_get(void * jarg1) {
  void * jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  Proud::AddrPort *result = 0 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  result = (Proud::AddrPort *)& ((arg1)->m_remoteAddr_onlyUdp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeReceivedMessage_relayed_set(void * jarg1, unsigned int jarg2) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_relayed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeReceivedMessage_relayed_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  bool result;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  result = (bool) ((arg1)->m_relayed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeReceivedMessage_messageID_set(void * jarg1, int jarg2) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  int arg2 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_messageID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeReceivedMessage_messageID_get(void * jarg1) {
  int jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  int result;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  result = (int) ((arg1)->m_messageID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeReceivedMessage_hasMessageID_set(void * jarg1, unsigned int jarg2) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  bool arg2 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_hasMessageID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NativeReceivedMessage_hasMessageID_get(void * jarg1) {
  unsigned int jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  bool result;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  result = (bool) ((arg1)->m_hasMessageID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeReceivedMessage_encryptMode_set(void * jarg1, int jarg2) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  Proud::EncryptMode arg2 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  arg2 = (Proud::EncryptMode)jarg2; 
  if (arg1) (arg1)->m_encryptMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeReceivedMessage_encryptMode_get(void * jarg1) {
  int jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  Proud::EncryptMode result;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  result = (Proud::EncryptMode) ((arg1)->m_encryptMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeReceivedMessage_compressMode_set(void * jarg1, int jarg2) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  Proud::CompressMode arg2 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  arg2 = (Proud::CompressMode)jarg2; 
  if (arg1) (arg1)->m_compressMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeReceivedMessage_compressMode_get(void * jarg1) {
  int jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  Proud::CompressMode result;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  result = (Proud::CompressMode) ((arg1)->m_compressMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NativeReceivedMessage() {
  void * jresult ;
  Proud::CReceivedMessage *result = 0 ;
  
  {
    try {
      result = (Proud::CReceivedMessage *)new Proud::CReceivedMessage();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeReceivedMessage_Clear(void * jarg1) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  {
    try {
      (arg1)->Clear();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeReceivedMessage_GetMsgBuffer(void * jarg1) {
  void * jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  void *result = 0 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  {
    try {
      result = (void *)Proud_CReceivedMessage_GetMsgBuffer(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeReceivedMessage_GetMsgBufferLength(void * jarg1) {
  int jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  int result;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  {
    try {
      result = (int)Proud_CReceivedMessage_GetMsgBufferLength(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NativeReceivedMessage_GetMsgReadOffset(void * jarg1) {
  int jresult ;
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  int result;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  {
    try {
      result = (int)Proud_CReceivedMessage_GetMsgReadOffset(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NativeReceivedMessage(void * jarg1) {
  Proud::CReceivedMessage *arg1 = (Proud::CReceivedMessage *) 0 ;
  
  arg1 = (Proud::CReceivedMessage *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartRoundTripLatencyTestParameter_testDurationMs_set(void * jarg1, int jarg2) {
  Proud::StartRoundTripLatencyTestParameter *arg1 = (Proud::StartRoundTripLatencyTestParameter *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Proud::StartRoundTripLatencyTestParameter *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->testDurationMs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartRoundTripLatencyTestParameter_testDurationMs_get(void * jarg1) {
  int jresult ;
  Proud::StartRoundTripLatencyTestParameter *arg1 = (Proud::StartRoundTripLatencyTestParameter *) 0 ;
  int32_t result;
  
  arg1 = (Proud::StartRoundTripLatencyTestParameter *)jarg1; 
  result = (int32_t) ((arg1)->testDurationMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StartRoundTripLatencyTestParameter_pingIntervalMs_set(void * jarg1, int jarg2) {
  Proud::StartRoundTripLatencyTestParameter *arg1 = (Proud::StartRoundTripLatencyTestParameter *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Proud::StartRoundTripLatencyTestParameter *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->pingIntervalMs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartRoundTripLatencyTestParameter_pingIntervalMs_get(void * jarg1) {
  int jresult ;
  Proud::StartRoundTripLatencyTestParameter *arg1 = (Proud::StartRoundTripLatencyTestParameter *) 0 ;
  int32_t result;
  
  arg1 = (Proud::StartRoundTripLatencyTestParameter *)jarg1; 
  result = (int32_t) ((arg1)->pingIntervalMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StartRoundTripLatencyTestParameter() {
  void * jresult ;
  Proud::StartRoundTripLatencyTestParameter *result = 0 ;
  
  {
    try {
      result = (Proud::StartRoundTripLatencyTestParameter *)new Proud::StartRoundTripLatencyTestParameter();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StartRoundTripLatencyTestParameter(void * jarg1) {
  Proud::StartRoundTripLatencyTestParameter *arg1 = (Proud::StartRoundTripLatencyTestParameter *) 0 ;
  
  arg1 = (Proud::StartRoundTripLatencyTestParameter *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoundTripLatencyTestResult_latencyMs_set(void * jarg1, int jarg2) {
  Proud::RoundTripLatencyTestResult *arg1 = (Proud::RoundTripLatencyTestResult *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Proud::RoundTripLatencyTestResult *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->latencyMs = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RoundTripLatencyTestResult_latencyMs_get(void * jarg1) {
  int jresult ;
  Proud::RoundTripLatencyTestResult *arg1 = (Proud::RoundTripLatencyTestResult *) 0 ;
  int32_t result;
  
  arg1 = (Proud::RoundTripLatencyTestResult *)jarg1; 
  result = (int32_t) ((arg1)->latencyMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoundTripLatencyTestResult_standardDeviationMs_set(void * jarg1, long long jarg2) {
  Proud::RoundTripLatencyTestResult *arg1 = (Proud::RoundTripLatencyTestResult *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::RoundTripLatencyTestResult *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->standardDeviationMs = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_RoundTripLatencyTestResult_standardDeviationMs_get(void * jarg1) {
  long long jresult ;
  Proud::RoundTripLatencyTestResult *arg1 = (Proud::RoundTripLatencyTestResult *) 0 ;
  int64_t result;
  
  arg1 = (Proud::RoundTripLatencyTestResult *)jarg1; 
  result = (int64_t) ((arg1)->standardDeviationMs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RoundTripLatencyTestResult_totalTestCount_set(void * jarg1, long long jarg2) {
  Proud::RoundTripLatencyTestResult *arg1 = (Proud::RoundTripLatencyTestResult *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::RoundTripLatencyTestResult *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->totalTestCount = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_RoundTripLatencyTestResult_totalTestCount_get(void * jarg1) {
  long long jresult ;
  Proud::RoundTripLatencyTestResult *arg1 = (Proud::RoundTripLatencyTestResult *) 0 ;
  int64_t result;
  
  arg1 = (Proud::RoundTripLatencyTestResult *)jarg1; 
  result = (int64_t) ((arg1)->totalTestCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RoundTripLatencyTestResult() {
  void * jresult ;
  Proud::RoundTripLatencyTestResult *result = 0 ;
  
  {
    try {
      result = (Proud::RoundTripLatencyTestResult *)new Proud::RoundTripLatencyTestResult();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RoundTripLatencyTestResult(void * jarg1) {
  Proud::RoundTripLatencyTestResult *arg1 = (Proud::RoundTripLatencyTestResult *) 0 ;
  
  arg1 = (Proud::RoundTripLatencyTestResult *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeToNetClientEventWrap_New() {
  void * jresult ;
  void *result = 0 ;
  
  {
    try {
      result = (void *)NativeToNetClientEventWrap_New();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeToNetClientEventWrap_Delete(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      NativeToNetClientEventWrap_Delete(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeToRmiStubWrap_New() {
  void * jresult ;
  void *result = 0 ;
  
  {
    try {
      result = (void *)NativeToRmiStubWrap_New();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeToRmiStubWrap_Delete(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      NativeToRmiStubWrap_Delete(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeToRmiProxyWrap_New() {
  void * jresult ;
  void *result = 0 ;
  
  {
    try {
      result = (void *)NativeToRmiProxyWrap_New();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeToRmiProxyWrap_Delete(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      NativeToRmiProxyWrap_Delete(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NativeToRmiContext_New() {
  void * jresult ;
  void *result = 0 ;
  
  {
    try {
      result = (void *)NativeToRmiContext_New();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NativeToRmiContext_Delete(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      NativeToRmiContext_Delete(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChangeErrorReactionTypeToDebugOutputTypeWhenUnityEngine() {
  {
    try {
      ChangeErrorReactionTypeToDebugOutputTypeWhenUnityEngine();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCSharpHandle(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      NetClientEvent_SetCSharpHandle(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackJoinServerComplete(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackJoinServerComplete arg2 = (CallbackJoinServerComplete) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackJoinServerComplete)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackJoinServerComplete(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackLeaveServer(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackLeaveServer arg2 = (CallbackLeaveServer) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackLeaveServer)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackLeaveServer(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackP2PMemberJoin(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackP2PMemberJoin arg2 = (CallbackP2PMemberJoin) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackP2PMemberJoin)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackP2PMemberJoin(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackP2PMemberLeave(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackP2PMemberLeave arg2 = (CallbackP2PMemberLeave) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackP2PMemberLeave)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackP2PMemberLeave(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackChangeP2PRelayState(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackChangeP2PRelayState arg2 = (CallbackChangeP2PRelayState) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackChangeP2PRelayState)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackChangeP2PRelayState(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackChangeServerUdpState(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackChangeServerUdpState arg2 = (CallbackChangeServerUdpState) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackChangeServerUdpState)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackChangeServerUdpState(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackSynchronizeServerTime(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackSynchronizeServerTime arg2 = (CallbackSynchronizeServerTime) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackSynchronizeServerTime)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackSynchronizeServerTime(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackError(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackError arg2 = (CallbackError) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackError)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackError(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackWarning(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackWarning arg2 = (CallbackWarning) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackWarning)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackWarning(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackInformation(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackInformation arg2 = (CallbackInformation) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackInformation)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackInformation(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackException(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackException arg2 = (CallbackException) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackException)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackException(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackServerOffline(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackServerOffline arg2 = (CallbackServerOffline) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackServerOffline)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackServerOffline(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackServerOnline(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackServerOnline arg2 = (CallbackServerOnline) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackServerOnline)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackServerOnline(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackP2PMemberOffline(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackP2PMemberOffline arg2 = (CallbackP2PMemberOffline) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackP2PMemberOffline)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackP2PMemberOffline(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackP2PMemberOnline(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackP2PMemberOnline arg2 = (CallbackP2PMemberOnline) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackP2PMemberOnline)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackP2PMemberOnline(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackNoRmiProcessed(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackNoRmiProcessed arg2 = (CallbackNoRmiProcessed) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackNoRmiProcessed)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackNoRmiProcessed(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NetClientEvent_SetCallbackReceiveUserMessage(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackReceiveUserMessage arg2 = (CallbackReceiveUserMessage) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackReceiveUserMessage)jarg2; 
  {
    try {
      NetClientEvent_SetCallbackReceiveUserMessage(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RmiContext_SetHostTag(void * jarg1, long long jarg2) {
  Proud::RmiContext *arg1 = (Proud::RmiContext *) 0 ;
  int64_t arg2 ;
  
  arg1 = (Proud::RmiContext *)jarg1; 
  arg2 = (int64_t)jarg2; 
  {
    try {
      RmiContext_SetHostTag(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReceivedMessage_GetRemoteAddress(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  void *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (void *)ReceivedMessage_GetRemoteAddress(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_RmiContext_GetHostTag(void * jarg1) {
  long long jresult ;
  void *arg1 = (void *) 0 ;
  int64_t result;
  
  arg1 = jarg1; 
  {
    try {
      result = (int64_t)RmiContext_GetHostTag(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddrPort_GetAddrSize() {
  int jresult ;
  int result;
  
  {
    try {
      result = (int)AddrPort_GetAddrSize();
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RmiStub_SetCSharpHandle(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      RmiStub_SetCSharpHandle(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RmiStub_SetCallbackGetRmiIDList(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackGetRmiIDList arg2 = (CallbackGetRmiIDList) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackGetRmiIDList)jarg2; 
  {
    try {
      RmiStub_SetCallbackGetRmiIDList(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RmiStub_SetCallbackGetRmiIDListCount(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackGetRmiIDListCount arg2 = (CallbackGetRmiIDListCount) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackGetRmiIDListCount)jarg2; 
  {
    try {
      RmiStub_SetCallbackGetRmiIDListCount(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RmiStub_SetCallbackProcessReceivedMessage(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackProcessReceivedMessage arg2 = (CallbackProcessReceivedMessage) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackProcessReceivedMessage)jarg2; 
  {
    try {
      RmiStub_SetCallbackProcessReceivedMessage(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RmiProxy_SetCSharpHandle(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      RmiProxy_SetCSharpHandle(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RmiProxy_SetCallbackGetRmiIDList(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackGetRmiIDList arg2 = (CallbackGetRmiIDList) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackGetRmiIDList)jarg2; 
  {
    try {
      RmiProxy_SetCallbackGetRmiIDList(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RmiProxy_SetCallbackGetRmiIDListCount(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  CallbackGetRmiIDListCount arg2 = (CallbackGetRmiIDListCount) 0 ;
  
  arg1 = jarg1; 
  arg2 = (CallbackGetRmiIDListCount)jarg2; 
  {
    try {
      RmiProxy_SetCallbackGetRmiIDListCount(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RmiProxy_RmiSend(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, int jarg6, char * jarg7, int jarg8) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  Proud::RmiContext *arg4 = (Proud::RmiContext *) 0 ;
  void *arg5 = (void *) 0 ;
  int arg6 ;
  std::string arg7 ;
  int arg8 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (Proud::RmiContext *)jarg4; 
  arg5 = jarg5; 
  arg6 = (int)jarg6; 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg7)->assign(jarg7); 
  arg8 = (int)jarg8; 
  {
    try {
      result = (bool)RmiProxy_RmiSend(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ByteArrayToNative(void * jarg1, int jarg2) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  int arg2 ;
  void *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (void *)ByteArrayToNative(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CopyManagedByteArrayToNativeByteArray(void * jarg1, int jarg2, void * jarg3) {
  void *arg1 = (void *) 0 ;
  int arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3; 
  {
    try {
      CopyManagedByteArrayToNativeByteArray(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_ByteArray_GetCount(void * jarg1) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  int result;
  
  arg1 = jarg1; 
  {
    try {
      result = (int)ByteArray_GetCount(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CopyNativeByteArrayToManageByteArray__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      CopyNativeByteArrayToManageByteArray(arg1,arg2);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CopyNativeByteArrayToManageByteArray__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      CopyNativeByteArrayToManageByteArray(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ConvertNatvieStringToManagedString(void * jarg1) {
  char * jresult ;
  void *arg1 = (void *) 0 ;
  Proud::String result;
  
  arg1 = jarg1; 
  {
    try {
      result = ConvertNatvieStringToManagedString(arg1);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return 0;
    }
  }
  jresult = SWIG_csharp_string_callback(StringT2A(result, GetUTF16toUTF8()).GetString()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CopyNativeAddrToManagedAddr(void * jarg1, void * jarg2, int jarg3) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      CopyNativeAddrToManagedAddr(arg1,arg2,arg3);
    } catch(std::exception& e)
    {
      SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, e.what());
      return ;
    }
  }
}


SWIGEXPORT Proud::CNetCoreStats * SWIGSTDCALL CSharp_NetClientStats_SWIGUpcast(Proud::CNetClientStats *jarg1) {
    return (Proud::CNetCoreStats *)jarg1;
}

#ifdef __cplusplus
}
#endif

